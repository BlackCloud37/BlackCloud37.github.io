<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Pissf****t&#x27;s</title>
    <subtitle>Somewhere</subtitle>
    <link rel="self" type="application/atom+xml" href="https://yechenz37.tech/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://yechenz37.tech"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-11T00:00:00+00:00</updated>
    <id>https://yechenz37.tech/atom.xml</id>
    <entry xml:lang="en">
        <title>Buffalo Wings&#x2F;水牛城辣翅</title>
        <published>2025-04-11T00:00:00+00:00</published>
        <updated>2025-04-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/cook/buffalo-wings/"/>
        <id>https://yechenz37.tech/misc/cook/buffalo-wings/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/cook/buffalo-wings/">&lt;p&gt;每次去火鬼或者 LUSH 都想吃，但是太贵了:&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;参考(照抄)，&lt;a href=&quot;https:&#x2F;&#x2F;cookpad.com&#x2F;tw&#x2F;%E9%A3%9F%E8%AD%9C&#x2F;16899226-%E6%B0%B4%E7%89%9B%E5%9F%8E%E8%BE%A3%E9%9B%9E%E7%BF%85&quot;&gt;cookpad 水牛城辣雞翅&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;记录用&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cai-liao&quot;&gt;材料&lt;&#x2F;h2&gt;
&lt;p&gt;鸡翅 10 个&lt;&#x2F;p&gt;
&lt;p&gt;普通面粉（中筋）适量&lt;&#x2F;p&gt;
&lt;p&gt;腌料&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;红椒粉 2 小匙&lt;&#x2F;li&gt;
&lt;li&gt;蒜头 4 瓣磨成泥 or 蒜粉&lt;&#x2F;li&gt;
&lt;li&gt;黑胡椒 2 小匙&lt;&#x2F;li&gt;
&lt;li&gt;米酒 0.5 大匙&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;蘸酱&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Tabasco 3 小匙(我买的是buffalo专用的辣椒酱)&lt;&#x2F;li&gt;
&lt;li&gt;柠檬汁 1 小匙&lt;&#x2F;li&gt;
&lt;li&gt;黄油 25 克&lt;&#x2F;li&gt;
&lt;li&gt;番茄酱 2 包&lt;&#x2F;li&gt;
&lt;li&gt;黑胡椒少许&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;zuo-fa&quot;&gt;做法&lt;&#x2F;h2&gt;
&lt;p&gt;鸡翅用腌料腌 1h 起，冷藏隔夜也可以。&lt;&#x2F;p&gt;
&lt;p&gt;腌好的鸡翅用厨房纸吸干水分，均匀裹面粉，可以多裹一些。&lt;&#x2F;p&gt;
&lt;p&gt;烤箱 200 度，总时长 30min，中途翻面。最好铺油纸而不是铝箔，铝箔容易粘鸡翅。&lt;&#x2F;p&gt;
&lt;p&gt;蘸酱：融化黄油，加入所有材料搅拌均匀。黄油最好不要煮太过。&lt;&#x2F;p&gt;
&lt;p&gt;烤好后混合蘸酱和鸡翅。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Gyuudon&#x2F;牛丼</title>
        <published>2025-04-11T00:00:00+00:00</published>
        <updated>2025-04-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/cook/gyudon/"/>
        <id>https://yechenz37.tech/misc/cook/gyudon/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/cook/gyudon/">&lt;p&gt;参考&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sirogohan.com&#x2F;recipe&#x2F;gyuudon&#x2F;&quot;&gt;丼ものでNo.1人気！牛丼レシピ&#x2F;作り方&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrysie.pixnet.net&#x2F;blog&#x2F;post&#x2F;116873534&quot;&gt;吉野家日式牛丼食譜作法：零失敗料理又來啦～～&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;cai-liao-liang-ren-fen&quot;&gt;材料(两人份)&lt;&#x2F;h2&gt;
&lt;p&gt;固体&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;牛肉片 250g&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;白&lt;&#x2F;strong&gt;洋葱 半个(150g) 切丝&lt;&#x2F;li&gt;
&lt;li&gt;姜 10g 切细丝&lt;&#x2F;li&gt;
&lt;li&gt;蒜泥少许(可不加)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;汤(v1)&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;柴鱼高汤或水(无盐) 200ml&lt;&#x2F;li&gt;
&lt;li&gt;日式浓口酱油 60ml&lt;&#x2F;li&gt;
&lt;li&gt;味醂 50ml&lt;&#x2F;li&gt;
&lt;li&gt;清酒 50ml&lt;&#x2F;li&gt;
&lt;li&gt;砂糖少许 看口味&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;汤(v2)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是我做的版本，因为买了菊印的日式出汁代替高汤，但里面有很多盐，故调整用量&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;日式出汁 50ml, 清水 150ml&lt;&#x2F;li&gt;
&lt;li&gt;日式浓口酱油 20-30ml(一开始少加，最后尝味)&lt;&#x2F;li&gt;
&lt;li&gt;味醂 50ml&lt;&#x2F;li&gt;
&lt;li&gt;清酒 50ml&lt;&#x2F;li&gt;
&lt;li&gt;砂糖少许 看口味&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;米饭，温泉蛋，葱花芝麻看心情&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zuo-fa&quot;&gt;做法&lt;&#x2F;h2&gt;
&lt;p&gt;混合汤部分的所有液体备用。&lt;&#x2F;p&gt;
&lt;p&gt;起锅，加油，小火炒洋葱到微焦。加汤、加姜蒜，小火煮 10min 左右，以洋葱透明入味为准。&lt;&#x2F;p&gt;
&lt;p&gt;加牛肉片，煮熟，捞掉浮沫。&lt;&#x2F;p&gt;
&lt;p&gt;尝味，淡了可以收汁，也可加少许浓口酱油。由于要拌饭吃，宜淡不宜浓。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C++ generator &amp; ranges</title>
        <published>2025-04-10T00:00:00+00:00</published>
        <updated>2025-04-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/programming/cpp/cpp-python-style-generator/"/>
        <id>https://yechenz37.tech/programming/cpp/cpp-python-style-generator/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/programming/cpp/cpp-python-style-generator/">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;考虑以下需求：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;需要对一个序列中，满足一定要求的前 N 个元素做某种操作&lt;&#x2F;li&gt;
&lt;li&gt;元素的筛选逻辑和具体操作是解耦的，操作者不知道有哪些元素、如何遍历、如何筛选&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;用 Python 实现的话，可以用 generator：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;elems_generator&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    elems = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# all elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;elems:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# how to iterate
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elem % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# filter logic
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;elem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    N = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# how many to process
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    done = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elems_generator&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elem % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# may also need to filter
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{done} {elem}&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# do something with the elem
&lt;&#x2F;span&gt;&lt;span&gt;            done += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;done &amp;gt;= N:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;c++ 中 naive 的写法是先将所有符合要求的元素 collect 成一个 vector 之类的再传给 process，但假设符合要求的元素很多，但内部只需要用到几个，这样做就显得有点 heavy。核心是想做到 lazy-evaluation。&lt;&#x2F;p&gt;
&lt;p&gt;由于 c++ 没有原生的 generator 语义，记录下收集到的实现方法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-lambda-generator&quot;&gt;1. Lambda Generator&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; Generator&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(Generator&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generator&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr int&lt;&#x2F;span&gt;&lt;span&gt; N = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; done = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; elem;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((elem = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generator&lt;&#x2F;span&gt;&lt;span&gt;()) != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(elem % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &amp;lt;&amp;lt; elem &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(++done &amp;gt;= N)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; elems = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; generator = [&amp;amp;elems, i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(i &amp;lt; elems.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt; e = elems[i++];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(generator);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2-custom-iter-action&quot;&gt;2. Custom Iter Action&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum class &lt;&#x2F;span&gt;&lt;span&gt;IterAction {
&lt;&#x2F;span&gt;&lt;span&gt;    Continue,
&lt;&#x2F;span&gt;&lt;span&gt;    Break,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; ForEachElem&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(ForEachElem&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;for_each_elem&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr int&lt;&#x2F;span&gt;&lt;span&gt; N = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; done = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;for_each_elem&lt;&#x2F;span&gt;&lt;span&gt;([&amp;amp;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; elem)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(elem % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &amp;lt;&amp;lt; elem &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(++done &amp;gt;= N)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IterAction::Break;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IterAction::Continue;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; elems = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt; for_each_elem = [&amp;amp;elems](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; process_elem)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; elem : elems)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(IterAction::Break == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process_elem&lt;&#x2F;span&gt;&lt;span&gt;(elem))
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(for_each_elem);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;3-ranges&quot;&gt;3. Ranges&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ranges&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; Range&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(Range&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr int&lt;&#x2F;span&gt;&lt;span&gt; N = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; elem : range 
&lt;&#x2F;span&gt;&lt;span&gt;        | std::views::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;([](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; elem) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; elem % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; })
&lt;&#x2F;span&gt;&lt;span&gt;        | std::views::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(N))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &amp;lt;&amp;lt; elem &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; elems = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(elems | std::views::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;([](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; elem) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; elem % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; }));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Synology NVME SSD smart check</title>
        <published>2025-03-16T00:00:00+00:00</published>
        <updated>2025-03-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/synology/m2-smart-check/"/>
        <id>https://yechenz37.tech/misc/synology/m2-smart-check/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/synology/m2-smart-check/">&lt;p&gt;群晖对于 HDD 有自带的定时 smart check 功能。但由于其本身不支持 NVME 设备作为存储池，(似乎)也没有对 NVME 设备的定时 smart check 功能。&lt;&#x2F;p&gt;
&lt;p&gt;系统自带 nvme-cli，为了实现定时检测，可以自己写一个检测脚本。&lt;&#x2F;p&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.ibm.com&#x2F;docs&#x2F;en&#x2F;power10&#x2F;9786-42H?topic=devices-running-linux-smart-log-command&quot;&gt;IBM - Running the Linux smart-log command to check the amount of remaining life in NVMe devices&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Usage: .&#x2F;nvme-smart-check.sh &#x2F;dev&#x2F;nvme0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-ne&lt;&#x2F;span&gt;&lt;span&gt; 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Usage: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;lt;device_path&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Checking &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; smart-log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;? -ne&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ERROR: Failed to read smart-log for &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. Details: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Extract the relevant fields from the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;critical_warning&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^critical_warning&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{gsub(&#x2F; &#x2F;,&amp;quot;&amp;quot;,$2); print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available_spare&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^available_spare[[:space:]]*:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; 1 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{gsub(&#x2F;[% ]&#x2F;,&amp;quot;&amp;quot;,$2); print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available_spare_threshold&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^available_spare_threshold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{gsub(&#x2F;[% ]&#x2F;,&amp;quot;&amp;quot;,$2); print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;media_errors&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^media_errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{gsub(&#x2F; &#x2F;,&amp;quot;&amp;quot;,$2); print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err_log&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^num_err_log_entries&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{gsub(&#x2F; &#x2F;,&amp;quot;&amp;quot;,$2); print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;percentage_used&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^percentage_used&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{gsub(&#x2F;[% ]&#x2F;,&amp;quot;&amp;quot;,$2); print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Initialize the unhealthy flag (0 = healthy, 1 = health issue detected)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;critical_warning&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-ne&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Critical warning is not 0.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available_spare&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-lt &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available_spare_threshold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Available spare (&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available_spare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%) is less than threshold (&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available_spare_threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%).&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;media_errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-ne&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Media errors detected.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err_log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-ne&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Error log entries detected.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;percentage_used&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-gt&lt;&#x2F;span&gt;&lt;span&gt; 10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Warning - percentage used is greater than 10% (&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;percentage_used&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%).&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Check complete.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unhealthy -eq&lt;&#x2F;span&gt;&lt;span&gt; 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: One or more health issues detected.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Device is healthy.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;用任务计划，root 每日运行一次，失败时发邮件即可。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>用公网服务器代理 qBittorrent 的上传</title>
        <published>2025-02-16T00:00:00+00:00</published>
        <updated>2025-02-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/bt/qb-proxy/"/>
        <id>https://yechenz37.tech/misc/bt/qb-proxy/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/bt/qb-proxy/">&lt;p&gt;思考用 qb 做种时，本地没有公网 IP 导致上传很慢的情景，能否通过公网服务器代理上传。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-lu&quot;&gt;思路&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;qb 使用公网服务器作为&lt;a href=&quot;https:&#x2F;&#x2F;yechenz37.tech&#x2F;misc&#x2F;bt&#x2F;qb-proxy&#x2F;#proxy&quot;&gt;代理&lt;&#x2F;a&gt;，向 peer 通告公网服务器的 IP&lt;&#x2F;li&gt;
&lt;li&gt;公网服务器设置一个&lt;a href=&quot;https:&#x2F;&#x2F;yechenz37.tech&#x2F;misc&#x2F;bt&#x2F;qb-proxy&#x2F;#port-forward&quot;&gt;端口转发&lt;&#x2F;a&gt;，将 peer 的连接转发到本地&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ke-xing-xing-yan-zheng&quot;&gt;可行性验证&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;proxy&quot;&gt;1. 代理&lt;&#x2F;h3&gt;
&lt;p&gt;首先在本地的 8088 端口开一个走公网服务器的 socks5 代理：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -D&lt;&#x2F;span&gt;&lt;span&gt; 0.0.0.0:8088&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -N -f&lt;&#x2F;span&gt;&lt;span&gt; user@your_server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 qb 中设置代理：socks5, 127.0.0.1:8088&lt;&#x2F;p&gt;
&lt;p&gt;代理下面的三个选项中(这里参考了 &lt;a href=&quot;https:&#x2F;&#x2F;cherr.cc&#x2F;qb_proxy&quot;&gt;qBittorrent反代解决NAT连通性&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;勾选：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用代理服务器进行主机名查询&lt;&#x2F;li&gt;
&lt;li&gt;只对 torrent 使用代理
&lt;ul&gt;
&lt;li&gt;这个选项决定上报到 tracker 的 IP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;不勾选：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用代理服务器进行用户连接
&lt;ul&gt;
&lt;li&gt;这个选项会导致下载也走代理。另外，上报的 port 会变成 1，导致 peer 无法连接&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;此外，还需要在 qb 高级设置里勾选 允许来自同一 IP 地址的多个连接，因为在本机看来所有 peer 都是公网服务器的 IP。&lt;&#x2F;p&gt;
&lt;p&gt;这样，qb 就会上报公网服务器的 IP 了，但是 peer 还不能从公网服务器连接到我们。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;port-forward&quot;&gt;2. 端口转发&lt;&#x2F;h3&gt;
&lt;p&gt;我比较习惯用 firewalld + tailscale 来端口转发，假设要将公网服务器的 60123 端口转发到本地 60123 端口：&lt;&#x2F;p&gt;
&lt;p&gt;安装 tailscale&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;tailscale.com&#x2F;install.sh | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后在本机和公网服务器上都认证并开启 tailscale，此时二者应该已经在 ts 的局域网中，并且可以 DIRECT 互访。假设本机的 ts IP 是 TAILSCALE_IP_LOCAL。&lt;&#x2F;p&gt;
&lt;p&gt;然后在服务器上设置端口转发：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TAILSCALE_IP_LOCAL&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100.100.100.100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;60123
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 打开 60123 端口
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firewall-cmd --add-port&lt;&#x2F;span&gt;&lt;span&gt;=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;tcp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --add-port&lt;&#x2F;span&gt;&lt;span&gt;=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;udp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --permanent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 将 60123 端口转发到 TAILSCALE_IP_LOCAL:60123
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firewall-cmd --zone&lt;&#x2F;span&gt;&lt;span&gt;=public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --add-forward-port&lt;&#x2F;span&gt;&lt;span&gt;=port=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}:proto=tcp:toaddr=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TAILSCALE_IP_LOCAL&lt;&#x2F;span&gt;&lt;span&gt;}:${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --permanent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firewall-cmd --zone&lt;&#x2F;span&gt;&lt;span&gt;=public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --add-forward-port&lt;&#x2F;span&gt;&lt;span&gt;=port=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}:proto=udp:toaddr=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TAILSCALE_IP_LOCAL&lt;&#x2F;span&gt;&lt;span&gt;}:${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --permanent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 启用 masquerade
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firewall-cmd --zone&lt;&#x2F;span&gt;&lt;span&gt;=public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --add-masquerade --permanent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 重启防火墙
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firewall-cmd --reload
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果服务器有安全组规则，记得打开对应的端口。&lt;&#x2F;p&gt;
&lt;p&gt;可以通过在本机 &lt;code&gt;nc -l ${TAILSCALE_IP_LOCAL} ${PORT}&lt;&#x2F;code&gt;，然后再在本机 &lt;code&gt;nc ${SERVER_IP} ${PORT}&lt;&#x2F;code&gt; 检查是否能连接来判断端口转发是否正确设置。&lt;&#x2F;p&gt;
&lt;p&gt;如果正确设置，那么之后 peer 就会通过公网服务器连接到我们，也就完成了整个代理过程。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Synology docker proxy</title>
        <published>2025-02-03T00:00:00+00:00</published>
        <updated>2025-02-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/synology/docker-proxy/"/>
        <id>https://yechenz37.tech/misc/synology/docker-proxy/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/synology/docker-proxy/">&lt;p&gt;DSM 7.2.2，配置 docker pull 走代理&lt;&#x2F;p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https:&#x2F;&#x2F;linux.do&#x2F;t&#x2F;topic&#x2F;109710&quot;&gt;【分享】群辉Docker pull代理设置方法&lt;&#x2F;a&gt;，只是配置文件位置不一样&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;pkg-ContainerManager-dockerd.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;HTTP(S)_PROXY&lt;&#x2F;code&gt; 改成自己的代理地址，&lt;code&gt;NO_PROXY&lt;&#x2F;code&gt; 不用动&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;HTTP_PROXY=http:&#x2F;&#x2F;127.0.0.1:1080&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;HTTPS_PROXY=http:&#x2F;&#x2F;127.0.0.1:1080&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;NO_PROXY=localhost,127.0.0.0&#x2F;8,192.168.0.0&#x2F;16,172.16.0.0&#x2F;12,10.0.0.0&#x2F;8&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;重启服务&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; synosystemctl restart pkg-ContainerManager-dockerd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Dream scenario[1]</title>
        <published>2025-01-26T00:00:00+00:00</published>
        <updated>2025-01-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/dream/1/"/>
        <id>https://yechenz37.tech/dream/1/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/dream/1/">&lt;p&gt;梦到演习死亡(别人的)。如果梦里的演习够多，到真的面对的时候，会不会还不如这个梦悲伤。&lt;&#x2F;p&gt;
&lt;p&gt;梦到军训、教官、俯卧撑。&lt;&#x2F;p&gt;
&lt;p&gt;梦到高中同学，只是大家关系都很好，她们在雨中为我打伞。&lt;&#x2F;p&gt;
&lt;p&gt;梦到一个木凳和滑轮组成的升降梯[1]在老房子[2]。在一个无趣的集市里，里面有人卖新鲜的像蜡做的水果，兼有腐烂得不成形的水果(boring)，无趣集市的另一要素是站在最中间就能看到集市的尽头，走两步就能离开(disappointing)。有人告诉我阁楼有免费的酒。拉(升降梯)绳子的是个女生，实在没有力气把我拉到二楼，我扒在天花板边缘好久。上面比集市热闹，派对，有音乐、酒、甜点，我问这些甜点都是免费的吗。对，姐姐嘴里塞满甜点和我说，但是它们都很劣质。然后派对停下了，屏幕上开始播放政治宣传片。&lt;&#x2F;p&gt;
&lt;p&gt;梦到我对 M 说我其实还没有和 C 分手[3]。&lt;&#x2F;p&gt;
&lt;p&gt;梦到阳台上有个显微兼观星装置，可以看到灰尘，或者星星和卫星。忘了是谁不顾我劝阻乱动上面的按钮，发射导弹摧毁了一颗(人造)卫星。&lt;&#x2F;p&gt;
&lt;p&gt;(也许是昨天)梦到在路边等了很久的车，好像是从机场回家。家乡建了好多新房子，有一栋每一层都是帆船形状，螺旋形的楼梯从底层通向顶层，我想住在这里，但感觉会风雨飘摇(好像经常梦到这样的房子：空间狭小、像悬空的玻璃盒子，不会阻挡日晒，风吹和暴雨会让它晃动，楼梯都是露天的)。&lt;&#x2F;p&gt;
&lt;p&gt;[1] 可能受 Sevrance S02E01 影响：&lt;em&gt;&quot;Did you have an elevator?&quot; &quot;We had, how you say, a rope&quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[2] 上次好像梦到老房子的天花板开了个洞，下面造了一个悬空的楼梯，当时不知道是做什么的。&lt;&#x2F;p&gt;
&lt;p&gt;[3] 好像梦到过好几次。&lt;a href=&quot;https:&#x2F;&#x2F;tvquot.es&#x2F;the-office&#x2F;quote&#x2F;6kzgecx&#x2F;&quot;&gt;Quote from&lt;&#x2F;a&gt; Erin：&lt;em&gt;I am really, really bad at break ups. Technically, I&#x27;m still dating my first grade boyfriend. I mean, we just had our 20th anniversary.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Some notes on python performance</title>
        <published>2025-01-24T00:00:00+00:00</published>
        <updated>2025-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/programming/python/some-hint-on-performance/"/>
        <id>https://yechenz37.tech/programming/python/some-hint-on-performance/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/programming/python/some-hint-on-performance/">&lt;p&gt;记录一下这两天写 python 时遇到的一些性能问题和解决。大部分不能算优化，只是特定 case 下的对性能数字量级的认知。大部分测试基于 python 3.8。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;isinstance-he-type-is&quot;&gt;isinstance 和 type is&lt;&#x2F;h3&gt;
&lt;p&gt;如果希望检查实例是否 exactly 是某个类型 A，而不包括 A 的子类，用 &lt;code&gt;type(a) is A&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果希望检查实例是否是 A 或者 A 的子类，用 &lt;code&gt;isinstance(a, A)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;除了语义上的区别，二者的性能也不同，如果检查的类型&lt;em&gt;继承链比较复杂&lt;&#x2F;em&gt;，且结果为 False 时，&lt;code&gt;isinstance&lt;&#x2F;code&gt; 的性能会差很多，否则差不多。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在我的 case 中，被检查的类型从 &lt;code&gt;pydantic.BaseModel&lt;&#x2F;code&gt; 派生多级。&lt;code&gt;isinstance&lt;&#x2F;code&gt; 为 False 时，比 &lt;code&gt;type is&lt;&#x2F;code&gt; 慢 ~10 倍。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pydantic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseModel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;timeit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    a: int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    b: int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;C1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    c: int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;C2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    c: int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;C3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    c: int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;c1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;c2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;isinstance true &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span&gt;    timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(c1, C1), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type is    true &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span&gt;    timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(c1) is C1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;isinstance false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span&gt;    timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(c1, C2), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type is    false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span&gt;    timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(c1) is C2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果是&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;isinstance true  0.05928762990515679
&lt;&#x2F;span&gt;&lt;span&gt;type is    true  0.08189487305935472
&lt;&#x2F;span&gt;&lt;span&gt;isinstance false 0.6317731359740719
&lt;&#x2F;span&gt;&lt;span&gt;type is    false 0.08188665006309748
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;datetime-strptime&quot;&gt;datetime.strptime&lt;&#x2F;h3&gt;
&lt;p&gt;当解析的时间戳格式固定时，手写 datetime 解析比 strptime 更快&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_timestamp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time_str&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; float:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;datetime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;datetime&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(time_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;timestr = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2024-12-06 22:57:00.393023&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parse_timestamp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_timestamp&lt;&#x2F;span&gt;&lt;span&gt;(timestr), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;strptime       &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: datetime.datetime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strptime&lt;&#x2F;span&gt;&lt;span&gt;(timestr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d %H&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%M&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;parse_timestamp 1.8856778349727392
&lt;&#x2F;span&gt;&lt;span&gt;strptime        6.808586899889633
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ru-guo-ke-yi-bu-yong-re-na-jiu-bu-yong&quot;&gt;如果可以不用 re，那就不用&lt;&#x2F;h3&gt;
&lt;p&gt;我需要从字符串中提取出 &lt;code&gt;key1=value key2=value2 ...&lt;&#x2F;code&gt; 这样的 pattern 成一个 dict。&lt;&#x2F;p&gt;
&lt;p&gt;一开始是直接 &lt;code&gt;split(&#x27; &#x27;)&lt;&#x2F;code&gt; 再 &lt;code&gt;split(&#x27;=&#x27;)&lt;&#x2F;code&gt;，后来发现某些 value 可能包含空格，图方便就改成了 &lt;code&gt;re.finditer&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;但其实这个解析任务是可以不用 re 的，而且手写解析比 re 快很多。具体可以参考代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;KEY_PATTERN &lt;&#x2F;span&gt;&lt;span&gt;= re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_kv_re&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; Dict[str, str]:
&lt;&#x2F;span&gt;&lt;span&gt;    data = {}
&lt;&#x2F;span&gt;&lt;span&gt;    prev_match = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;KEY_PATTERN.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span&gt;(text):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;prev_match:
&lt;&#x2F;span&gt;&lt;span&gt;            data[prev_match.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)] = text[prev_match.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;() : match.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;()].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        prev_match = match
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;prev_match:
&lt;&#x2F;span&gt;&lt;span&gt;        data[prev_match.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)] = text[prev_match.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;() :].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;data
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_kv_split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; Dict[str, str]:
&lt;&#x2F;span&gt;&lt;span&gt;    data = {}
&lt;&#x2F;span&gt;&lt;span&gt;    prev_key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;    val = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;text.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in token:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;prev_key:
&lt;&#x2F;span&gt;&lt;span&gt;                data[prev_key] = val
&lt;&#x2F;span&gt;&lt;span&gt;                val = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            prev_key, val = token.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            val += &amp;quot; &amp;quot; + token
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;prev_key:
&lt;&#x2F;span&gt;&lt;span&gt;        data[prev_key] = val
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;data
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;text = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key1=some_val1 key2=some_val2 key3=some_val3 key4=looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong key5={&amp;quot;some&amp;quot;: &amp;quot;val&amp;quot;, &amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;, &amp;quot;random&amp;quot;: 123}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_kv_re&lt;&#x2F;span&gt;&lt;span&gt;(text) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_kv_split&lt;&#x2F;span&gt;&lt;span&gt;(text)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;re   &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_kv_re&lt;&#x2F;span&gt;&lt;span&gt;(text), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_kv_split&lt;&#x2F;span&gt;&lt;span&gt;(text), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;re    4.418985206983052
&lt;&#x2F;span&gt;&lt;span&gt;split 0.19559685792773962
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果一定要用 re，可以考虑去 &lt;a href=&quot;https:&#x2F;&#x2F;regex101.com&#x2F;&quot;&gt;regex101&lt;&#x2F;a&gt; 上检查自己 pattern 的性能，例如避免 &lt;a href=&quot;https:&#x2F;&#x2F;regex101.com&#x2F;r&#x2F;iXSKTs&#x2F;1&#x2F;debugger&quot;&gt;catastrophic backtracking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;另外，还试过把 &lt;code&gt;&quot;=&quot; in token&lt;&#x2F;code&gt; 改成 find，想着这样就可以省掉 split 直接按 index slice，但更慢了，以下 timeit 说明了原因&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;token = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key2=some_val2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;in    &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in token, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;find  &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: token.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;index = token.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;slice &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: [token[:index], token[index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;:]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;split &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, timeit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: token.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;in     0.05515715305227786
&lt;&#x2F;span&gt;&lt;span&gt;find   0.1189718859968707
&lt;&#x2F;span&gt;&lt;span&gt;slice  0.1710334960371256
&lt;&#x2F;span&gt;&lt;span&gt;split  0.15278159803710878
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;in 实在是太快了，另外 slice 居然也比 split 慢。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dang-xin-gc-you-qi-shi-chu-li-da-liang-dui-xiang-shi&quot;&gt;当心 gc，尤其是处理大量对象时&lt;&#x2F;h3&gt;
&lt;p&gt;python 的 list 被认为是有均摊插入复杂度的，但是当插入的是 object 且数据量很大时，可能会观测到某一次插入操作耗时&lt;strong&gt;非常久&lt;&#x2F;strong&gt;的情况，也许在代码中会表现为程序莫名其妙地 block 秒级别。我之前写过一篇类似的，&lt;a href=&quot;..&#x2F;gc-performance&quot;&gt;gc 与循环引用&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;2473783&#x2F;is-there-a-way-to-circumvent-python-list-append-becoming-progressively-slower&quot;&gt;SO&lt;&#x2F;a&gt; 上有一个相关的讨论。其&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;2480015&#x2F;12838860&quot;&gt;回答&lt;&#x2F;a&gt; 中的结论，我在 python 3.8 上 somehow 也能复现，不论是在 list，deque 亦或是 dict 上，例如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;gc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.why = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no reason&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;time_to_append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append_list&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item_gen&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    t0 = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, size):
&lt;&#x2F;span&gt;&lt;span&gt;        append_list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item_gen&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() - t0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    x = []
&lt;&#x2F;span&gt;&lt;span&gt;    count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(x), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time_to_append&lt;&#x2F;span&gt;&lt;span&gt;(count, x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_nogc&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    x = []
&lt;&#x2F;span&gt;&lt;span&gt;    count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        gc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(x), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time_to_append&lt;&#x2F;span&gt;&lt;span&gt;(count, x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;        gc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test_nogc&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;img class=&quot;invertable&quot; src=&quot;&amp;#x2F;images&amp;#x2F;content&amp;#x2F;programming&amp;#x2F;python&amp;#x2F;some-hint-on-performance&amp;#x2F;gc_result.png&quot; alt=&quot;gc_result&quot; &#x2F;&gt;
&lt;p&gt;发现这种场景时，可以选择禁用自动 gc 并在合适的时候手动 collect。此外，如果代码不包含任何循环引用，禁用 gc 并且不 collect 应当也是安全的，不会导致内存泄露。可以用 gc 的 DEBUG_LEAK flag 来检查是否有循环引用。&lt;&#x2F;p&gt;
&lt;p&gt;另外，注意这个现象发生的数据量级很大，例如 1e7 个对象时，gc 才会需要 1s。因此如果观测到了这个现象，建议先检查自己的代码，看到底是真的有那么多数据，还是自己忘记了一些资源回收工作导致数据无节制增长了(例如往 dict 里加了 key 但没有删除)。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NVME SSD 导致的 Synology 系统无响应</title>
        <published>2025-01-21T00:00:00+00:00</published>
        <updated>2025-02-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/synology/synology-hang-up/"/>
        <id>https://yechenz37.tech/misc/synology/synology-hang-up/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/synology/synology-hang-up/">&lt;h2 id=&quot;2025-03-09-geng-xin&quot;&gt;2025-03-09 更新&lt;&#x2F;h2&gt;
&lt;p&gt;最近又发生了一次 hang，同样是 I&#x2F;O timeout error，新增两个内核参数设置：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nvme.io_timeout=3000&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nvme.admin_timeout=3000&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;继续观察&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;记录一次群晖 debug 的经历&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;DS918+，DSM7，装了一块 ZHITAI 的 2T NVME SSD，通过 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;007revad&#x2F;Synology_M2_volume&quot;&gt;Synology_M2_volume&lt;&#x2F;a&gt; 挂载为存储盘，参考 &lt;a href=&quot;..&#x2F;m2-ssd&quot;&gt;synology-m2-ssd&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在连续运行一段时间后，系统偶尔会进入如下&lt;strong&gt;状态&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;机器物理上还在运行
&lt;ul&gt;
&lt;li&gt;风扇转，硬盘转，status led 常绿，WAN 口指示灯绿，等等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;系统无任何响应
&lt;ul&gt;
&lt;li&gt;ping host is down&lt;&#x2F;li&gt;
&lt;li&gt;ssh 无法连接&lt;&#x2F;li&gt;
&lt;li&gt;webui 无法访问&lt;&#x2F;li&gt;
&lt;li&gt;路由器里 NAS 的 lease 都消失了&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;发生原因不明，一般都是在没有什么操作&#x2F;使用的状态下，突然发现访问不了了。&lt;&#x2F;p&gt;
&lt;p&gt;发生之后只能长按电源键直到强制关机，然后重启。&lt;&#x2F;p&gt;
&lt;p&gt;重启之后 DSM 层面没有错误日志，硬盘状态也都是正常。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;possible-reason&quot;&gt;(可能的)原因&lt;&#x2F;h2&gt;
&lt;p&gt;因为没法复现，只能先认为是这个原因，如果能稳定一两个月不复现，就认为解决。&lt;&#x2F;p&gt;
&lt;p&gt;看 kernel log 发现在系统无响应时，有如下错误：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;dsm&#x2F;var&#x2F;log&#x2F;kern.log:2025-01-19T00:02:56+08:00 Ship kernel: [992391.293034] nvme nvme0: I&#x2F;O 262 QID 1 timeout, aborting
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;dsm&#x2F;var&#x2F;log&#x2F;kern.log:2025-01-19T00:02:56+08:00 Ship kernel: [992391.299025] nvme nvme0: I&#x2F;O 263 QID 1 timeout, aborting
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;dsm&#x2F;var&#x2F;log&#x2F;kern.log:2025-01-19T00:02:56+08:00 Ship kernel: [992391.305010] nvme nvme0: I&#x2F;O 264 QID 1 timeout, aborting
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;dsm&#x2F;var&#x2F;log&#x2F;kern.log:2025-01-19T00:02:57+08:00 Ship kernel: [992392.277052] nvme nvme0: I&#x2F;O 13 QID 0 timeout, reset controller
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;dsm&#x2F;var&#x2F;log&#x2F;kern.log:2025-01-19T00:03:57+08:00 Ship kernel: [992452.286778] nvme nvme0: I&#x2F;O 262 QID 1 timeout, reset controller
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;dsm&#x2F;var&#x2F;log&#x2F;kern.log:2025-01-19T00:05:35+08:00 Ship kernel: [992549.781624] INFO: task md5_raid1:9304 blocked for more than 120 seconds.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;搜索 &lt;code&gt;NVME QID timeout&lt;&#x2F;code&gt;，几个帖子[&lt;a href=&quot;https:&#x2F;&#x2F;bbs.archlinux.org&#x2F;viewtopic.php?id=286274&quot;&gt;1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;forum.proxmox.com&#x2F;threads&#x2F;problem-with-nvme-timeout-and-aborting.144492&#x2F;&quot;&gt;2&lt;&#x2F;a&gt;]都指向一个原因：
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;Solid_state_drive&#x2F;NVMe#Troubleshooting&quot;&gt;arch wiki ssd&#x2F;nvme - troubleshooting&lt;&#x2F;a&gt;。且表现基本相同：报错后系统挂起，直到重启为止。&lt;&#x2F;p&gt;
&lt;p&gt;解决方案也在&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;Solid_state_drive&#x2F;NVMe#Troubleshooting&quot;&gt;其中&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;添加内核参数 &lt;code&gt;nvme_core.default_ps_max_latency_us=0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在 DSM7 里，似乎没有 &lt;code&gt;nvme_core&lt;&#x2F;code&gt;，但是可以看到有 &lt;code&gt;&#x2F;sys&#x2F;module&#x2F;nvme&#x2F;parameters&#x2F;default_ps_max_latency_us&lt;&#x2F;code&gt;，这个 parameter，猜测是一样的&lt;&#x2F;p&gt;
&lt;p&gt;热修改：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 0 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;module&#x2F;nvme&#x2F;parameters&#x2F;default_ps_max_latency_us
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;持久化，本来是应该改 grub 的，但不确定群晖让不让改，于是加到了系统启动脚本里：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;控制面板，任务计划，新增，触发的任务，用户定义的脚本&lt;&#x2F;li&gt;
&lt;li&gt;用户账号 root，事件 开机&lt;&#x2F;li&gt;
&lt;li&gt;脚本&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt; &#x2F;sys&#x2F;module&#x2F;nvme&#x2F;parameters&#x2F;default_ps_max_latency_us
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;debug-li-cheng&quot;&gt;Debug 历程&lt;&#x2F;h2&gt;
&lt;p&gt;第一次发现(2024-12-12)，以为是群晖系统问题，但开机后没找到什么日志，于是没有管。&lt;&#x2F;p&gt;
&lt;p&gt;第二次发现(2025-01-05)，因为以为是群晖系统问题，拍下机器当时的表现提了个工单到群晖支持(还要下载 debug log 一并上传)，工程师回复还挺快的，回复：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;能看到 improper shutdown(强制关机) 和一些 hung task，但由于需要开启 定時记录系统运行状态 这个选项才有更详细的信息，所以暂时没法确认原因(此时我刚打开该选项)&lt;&#x2F;li&gt;
&lt;li&gt;建议做三次 memtest，排除内存问题&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;此时确实怀疑是不是内存问题，因为用了一条 kingston 的内存，但是当初装上去的时候 memtest 是通过的(因为坏的内存条丢数据，参考 &lt;a href=&quot;..&#x2F;btrfs-repair&quot;&gt;synology-btrfs-repair&lt;&#x2F;a&gt;)。不过做了三次 memtest，都通过了。只好等下次再复现的时候把详细日志给工程师。&lt;&#x2F;p&gt;
&lt;p&gt;第三次发现(2025-01-18)，在看 nas 上电影的时候又 hung 了，这次工程师的回复是：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;經過檢查日誌，我們發現 NVMe 裝置（序號：ZTA22T0KA2245509Z1）已達到 100% 的使用率，並發生了 I&#x2F;O timeout error。這可能導致系統無法取得必要資源，進而引發系統卡住的問題。
&lt;br&gt;&lt;br&gt;
此外，DS918+ 並不支援使用 M.2 NVMe 裝置來建立 Storage Pool（僅支援此清單中列出的裝置），僅能用來建立 SSD 快取。我們不確定您是如何使用 NVMe 裝置建立 Storage Pool1&#x2F;Volume1。為確保系統穩定性，我們建議您備份 Volume 1 上的所有資料，並使用 SATA HDD&#x2F;SSD 重新建立 Storage Pool1&#x2F;Volume1。另外，請選擇此清單中列出的相容硬碟 ，以確保資料完整性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第二段话让我有种作弊被抓的感觉😥，不过确实提醒我是 I&#x2F;O timeout error 的问题，于是去看这次下载下来的日志：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;下载下来的日志是 &lt;code&gt;.dat&lt;&#x2F;code&gt; 文件，其实是个 zip，unzip 一下就好&lt;&#x2F;li&gt;
&lt;li&gt;里面包含很多日志，由于我知道问题发生的大概时间是 2025-01-19 凌晨那会，于是 &lt;code&gt;grep -P &quot;2025-01-19\w+00:[01].*timeout&quot; -r .&lt;&#x2F;code&gt;，就找到了&lt;a href=&quot;https:&#x2F;&#x2F;yechenz37.tech&#x2F;misc&#x2F;synology&#x2F;synology-hang-up&#x2F;#possible-reason&quot;&gt;上面&lt;&#x2F;a&gt;的错误日志&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fraked by mutable default values</title>
        <published>2025-01-21T00:00:00+00:00</published>
        <updated>2025-01-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/programming/python/dataclass-shared-field/"/>
        <id>https://yechenz37.tech/programming/python/dataclass-shared-field/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/programming/python/dataclass-shared-field/">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;dataclasses.html#mutable-default-values&quot;&gt;Mutable default values&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在写一个 python server 时，因为需要定义一个 &lt;code&gt;Connection&lt;&#x2F;code&gt; 类，用于保存一个连接的 &lt;code&gt;socket&lt;&#x2F;code&gt; 和 &lt;code&gt;recvbuf&lt;&#x2F;code&gt;，于是写出了如下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;socket
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;dataclasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;dataclass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Connection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    socket: socket.socket
&lt;&#x2F;span&gt;&lt;span&gt;    recvbuf: bytearray = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytearray&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后就遇到了一些难以定位的 bug，比如来自 Client A 的连接上好像收到了本应来自 Client B 的数据。&lt;&#x2F;p&gt;
&lt;p&gt;发现是 default member value 会被保存在 class attributes 里，recvbuf 被所有 Connection 实例共享。&lt;&#x2F;p&gt;
&lt;p&gt;一般写非 dataclass 的代码时，默认值都会在 &lt;code&gt;__init__&lt;&#x2F;code&gt; 里设置，写 dataclass 时习惯了这种在 class attribute 里设默认值的方式，才遇到这个问题。&lt;&#x2F;p&gt;
&lt;p&gt;正确写法是：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;dataclasses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;field, dataclass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Connection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    socket: socket.socket
&lt;&#x2F;span&gt;&lt;span&gt;    recvbuf: bytearray = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_factory&lt;&#x2F;span&gt;&lt;span&gt;=bytearray)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr data-content=&quot;&quot; \&gt;
&lt;p&gt;dataclass 其实会检查这种 case，即默认值是否是 mutable 的，比如&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;dataclasses.html#mutable-default-values&quot;&gt;文档&lt;&#x2F;a&gt;指出：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dataclass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    x: list = []      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This code raises ValueError
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为什么 bytearray 就不会报错呢。&lt;&#x2F;p&gt;
&lt;p&gt;测试发现，我本地的 python 3.13.1 对 bytearray 和 list 均会报错&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ValueError: mutable default &amp;lt;class &amp;#39;bytearray&amp;#39;&amp;gt; for field x is not allowed: use default_factory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但服务器上的 python 3.8 只会对 list 报错&lt;&#x2F;p&gt;
&lt;p&gt;去看 dataclass 的实现，3.8 的逻辑是：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For real fields, disallow mutable defaults for known types.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;f._field_type is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_FIELD &lt;&#x2F;span&gt;&lt;span&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(f.default, (list, dict, set)):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mutable default &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(f.default)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; for field &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;{f.name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; is not allowed: use default_factory&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;3.13&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For real fields, disallow mutable defaults.  Use unhashable as a proxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# indicator for mutability.  Read the __hash__ attribute from the class,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# not the instance.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;f._field_type is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_FIELD &lt;&#x2F;span&gt;&lt;span&gt;and f.default.__class__.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__hash__ &lt;&#x2F;span&gt;&lt;span&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mutable default &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(f.default)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; for field &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;{f.name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; is not allowed: use default_factory&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新版本的检查更充分一些&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>从 mdbook 迁移到 Zola</title>
        <published>2025-01-19T00:00:00+00:00</published>
        <updated>2025-01-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/blog/zola/"/>
        <id>https://yechenz37.tech/misc/blog/zola/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/blog/zola/">&lt;p&gt;之前一直用 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;mdBook&quot;&gt;mdBook&lt;&#x2F;a&gt; 写博客，不过时间久了发现 book 和 blog 的定位其实不一样，book 是以目录和页面组织，丢失了时间之类的信息。于是打算迁移到其他 blog 框架，尝试用 &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在这里记录我是如何使用 Zola 的，一些地方不会特别详细，假设读者已经自己看过官网的文档。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zola-setup&quot;&gt;Zola Setup&lt;&#x2F;h2&gt;
&lt;p&gt;安装 &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;installation&#x2F;&quot;&gt;zola-cli&lt;&#x2F;a&gt;，例如 &lt;code&gt;paru -S zola&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后创建第一个 zola 项目，options 无所谓，反正之后可以在 &lt;code&gt;config.toml&lt;&#x2F;code&gt; 里改。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; init zolablog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;zola 有很多可用 &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;themes&lt;&#x2F;a&gt;，我选了 &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;no-style-please&#x2F;&quot;&gt;no style, please!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;安装主题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; zolablog&#x2F;themes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;gitlab.com&#x2F;4bcx&#x2F;no-style-please.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为了方便快速理解这个主题的页面结构，可以先尝试在本地跑一个 &lt;a href=&quot;https:&#x2F;&#x2F;atgumx.gitlab.io&#x2F;no-style-please&quot;&gt;live-demo&lt;&#x2F;a&gt; 一样的页面：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsync&lt;&#x2F;span&gt;&lt;span&gt; themes&#x2F;no-style-please&#x2F;content&#x2F;* content&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsync&lt;&#x2F;span&gt;&lt;span&gt; themes&#x2F;no-style-please&#x2F;config.toml config.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 修改一下 config.toml 的配置，且添加一行：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# theme = &amp;quot;no-style-please&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时候访问 &lt;a href=&quot;http:&#x2F;&#x2F;localhost:1111&quot;&gt;http:&#x2F;&#x2F;localhost:1111&lt;&#x2F;a&gt; 应该就能看到一个和 live-demo 一样的页面了。&lt;&#x2F;p&gt;
&lt;p&gt;随后在 &lt;code&gt;config.toml&lt;&#x2F;code&gt; 的 &lt;code&gt;[extra]&lt;&#x2F;code&gt; 里添加 &lt;code&gt;list_pages = true&lt;&#x2F;code&gt;，这样主页应该还会把所有 &lt;code&gt;page&lt;&#x2F;code&gt; 按时间逆序展示出来。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mu-lu-jie-gou&quot;&gt;目录结构&lt;&#x2F;h2&gt;
&lt;p&gt;所有页面的&lt;strong&gt;内容&lt;&#x2F;strong&gt;都在 &lt;code&gt;content&#x2F;&lt;&#x2F;code&gt; 目录下，每个文件夹 + &lt;code&gt;_index.md&lt;&#x2F;code&gt; 就是一个 section，里面的其他 &lt;code&gt;.md&lt;&#x2F;code&gt; 就是该 section 的 page，section 可以嵌套。如果想让文件夹不成为 section，可以在其 &lt;code&gt;_index.md&lt;&#x2F;code&gt; 里添加 &lt;code&gt;transparent = true&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;templates 控制每个页面的&lt;strong&gt;内容&lt;&#x2F;strong&gt;如何被渲染成 html，例如 &lt;code&gt;index.html&lt;&#x2F;code&gt; 控制主页的渲染，目前这些 template 都是主题自带的，为了覆盖，可以在 &lt;code&gt;templates&#x2F;&lt;&#x2F;code&gt; 下创建同名文件，该文件会被用于覆盖主题的 template。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mo-ban-yu-yan&quot;&gt;模板语言&lt;&#x2F;h2&gt;
&lt;p&gt;在开启 &lt;code&gt;list_pages = true&lt;&#x2F;code&gt; 后，主页会展示所有 &lt;code&gt;content&#x2F;*.md&lt;&#x2F;code&gt;，但不包含下级 section 的 page。我希望在主页展示所有近期 post，因此需要修改并覆盖主页的 template。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsync&lt;&#x2F;span&gt;&lt;span&gt; themes&#x2F;no-style-please&#x2F;templates&#x2F;index.html templates&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主题自带的主页模板是 &lt;code&gt;index.html&lt;&#x2F;code&gt;，内容如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% extends &amp;quot;base.html&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% block content %}
&lt;&#x2F;span&gt;&lt;span&gt;{{ section.content | safe }}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% if config.extra.list_pages %}
&lt;&#x2F;span&gt;&lt;span&gt;{% if paginator %}
&lt;&#x2F;span&gt;&lt;span&gt;{% set pages = paginator.pages | sort(attribute=&amp;quot;date&amp;quot;) | reverse %}
&lt;&#x2F;span&gt;&lt;span&gt;{% else %}
&lt;&#x2F;span&gt;&lt;span&gt;{% set pages = section.pages | sort(attribute=&amp;quot;date&amp;quot;) | reverse %}
&lt;&#x2F;span&gt;&lt;span&gt;{% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% for page in pages %}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ page.permalink | safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{% if page.date and not config.extra.no_list_date %}{{ page.date }} - {% endif %}{{ page.title }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{ page.description }}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endfor %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- 省略了 paginator 的实现 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;{% endblock content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到在没开启 paginator 时，主要的渲染逻辑就是从 &lt;code&gt;section.pages&lt;&#x2F;code&gt; 里获取所有 page，然后列表展示，子目录下的 page 不是当前 section 的 page，因此不会展示，将 &lt;code&gt;list_pages&lt;&#x2F;code&gt; 部分修改成：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% if config.extra.list_pages %}
&lt;&#x2F;span&gt;&lt;span&gt;{% if paginator %}
&lt;&#x2F;span&gt;&lt;span&gt;{% set pages = paginator.pages | sort(attribute=&amp;quot;date&amp;quot;) | reverse %}
&lt;&#x2F;span&gt;&lt;span&gt;{% else %}
&lt;&#x2F;span&gt;&lt;span&gt;{% set section_paths = section.subsections %}
&lt;&#x2F;span&gt;&lt;span&gt;{% set_global pages = [] %}
&lt;&#x2F;span&gt;&lt;span&gt;{% for section_path in section_paths %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% set section = get_section(path=section_path) %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% set_global pages = pages | concat(with=section.pages) %}
&lt;&#x2F;span&gt;&lt;span&gt;{% endfor %}
&lt;&#x2F;span&gt;&lt;span&gt;{% set pages = pages | sort(attribute=&amp;quot;date&amp;quot;) | reverse | slice(end=15) %}
&lt;&#x2F;span&gt;&lt;span&gt;{% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        posts
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% for page in pages %}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {% if page.date and not config.extra.no_list_date %}
&lt;&#x2F;span&gt;&lt;span&gt;                {{ page.date }}
&lt;&#x2F;span&gt;&lt;span&gt;            {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ page.permalink | safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{ page.title }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{ page.description }}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% endfor %}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;deploy-gh-pages&quot;&gt;Deploy gh-pages&lt;&#x2F;h2&gt;
&lt;p&gt;我的 &lt;code&gt;deploy.yml&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deploy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ZOLA_VERSION&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.19.2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetch-depth&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Install Zola
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        curl -sL https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;releases&#x2F;download&#x2F;v${ZOLA_VERSION}&#x2F;zola-v${ZOLA_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xz -C &#x2F;usr&#x2F;local&#x2F;bin
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Build
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git submodule update --init --recursive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        zola build
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deploy GitHub Pages
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git worktree add gh-pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git config user.name &amp;quot;Deploy from CI&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git config user.email &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        cd gh-pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        # Delete the ref to avoid keeping history.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git update-ref -d refs&#x2F;heads&#x2F;gh-pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        rm -rf *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        mv ..&#x2F;public&#x2F;* .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git commit -m &amp;quot;Deploy $GITHUB_SHA to gh-pages&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        git push --force --set-upstream origin gh-pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C++ pointer to member</title>
        <published>2025-01-02T00:00:00+00:00</published>
        <updated>2025-01-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/programming/cpp/pointer-to-member/"/>
        <id>https://yechenz37.tech/programming/cpp/pointer-to-member/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/programming/cpp/pointer-to-member/">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;在做侵入式容器时，容器通常需要访问对象的成员。例如，侵入式链表需要将链表节点嵌入到对象中，这时用 pointer to member 来实现，可以避免硬编码成员名：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span&gt;    Node* next;
&lt;&#x2F;span&gt;&lt;span&gt;    Node* prev;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    Node node1;
&lt;&#x2F;span&gt;&lt;span&gt;    Node node2;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; PtrToMember&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; access via
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Node node = foo-&amp;gt;*PtrToMember;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;&amp;amp;Foo::node1&amp;gt; list1;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;&amp;amp;Foo::node2&amp;gt; list2;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;tui-dao-pointer-to-who-s-member&quot;&gt;推导 Pointer to &lt;em&gt;Who&#x27;s&lt;&#x2F;em&gt; Member&lt;&#x2F;h2&gt;
&lt;p&gt;由于容器往往需要知道储存对象的类型，例如上面的 Foo，最简单的做法是也放到模板参数里&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; PtrToMember, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;&amp;amp;Foo::node1, Foo&amp;gt; list1;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但既然 &lt;code&gt;PtrToMember&lt;&#x2F;code&gt; 已经包含了 &lt;code&gt;Foo&lt;&#x2F;code&gt;，其实可以自动推导出 &lt;code&gt;T&lt;&#x2F;code&gt;，参考 &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;65375734&#x2F;inferring-type-and-class-when-passing-a-pointer-to-data-member-as-a-non-type-tem&quot;&gt;Inferring type and class when passing a pointer to data member as a non-type template argument&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;type_from_member;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; Cls,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; M&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;type_from_member&amp;lt;M Cls::*&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;class_type = Cls;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;member_type = M;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; PtrToMember, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T = type_from_member&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;decltype&lt;&#x2F;span&gt;&lt;span&gt;(PtrToMember)&amp;gt;::class_type&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;&amp;amp;Foo::node1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* T=Foo *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list1;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，上述模板特化中，&lt;code&gt;PtrToMember&lt;&#x2F;code&gt; 的类型是 &lt;code&gt;M Cls::*&lt;&#x2F;code&gt;，即 &lt;code&gt;Node Foo::*&lt;&#x2F;code&gt;。&lt;code&gt;Node Foo::*&lt;&#x2F;code&gt; 是一个明确的 &lt;code&gt;typename&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;Node Foo::* ptr = &amp;amp;Foo::node1;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Foo foo;
&lt;&#x2F;span&gt;&lt;span&gt;Node&amp;amp; node = foo.*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完整的定义可以参考 &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;language&#x2F;pointer&quot;&gt;Pointer declaration&lt;&#x2F;a&gt; 的 Pointers to members 一节&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-cheng&quot;&gt;继承&lt;&#x2F;h2&gt;
&lt;p&gt;在实践中，&lt;code&gt;Foo&lt;&#x2F;code&gt; 可能会涉及继承，此时会发现自动推导失效了：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Base {
&lt;&#x2F;span&gt;&lt;span&gt;    Node node;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Derived : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Base &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;&amp;amp;Derived::node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* T=Base *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 此处推导的结果是 T=Base, 而非期望的 Derived,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                                         * 即使我们写了 &amp;amp;Derived::node *&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;原因还是 &lt;code&gt;&amp;amp;Derived::node&lt;&#x2F;code&gt; 的类型是 &lt;code&gt;Node Base::*&lt;&#x2F;code&gt;，而不是 &lt;code&gt;Node Derived::*&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;static_assert(std::is_same_v&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;decltype&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;Derived::node), Node Base::*&amp;gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Pass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; static_assert(std::is_same_v&amp;lt;decltype(&amp;amp;Derived::node), Node Derived::*&amp;gt;); &#x2F;&#x2F; Fail
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外，基类的 &lt;code&gt;PtrToMember&lt;&#x2F;code&gt; 可以隐式转换成派生类的 &lt;code&gt;PtrToMember&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pointer to data member of an accessible unambiguous non-virtual base class can be implicitly converted to pointer to the same data member of a derived class&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;Node Base::* ptr = &amp;amp;Base::node;
&lt;&#x2F;span&gt;&lt;span&gt;Node Derived::* ptr2 = ptr; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; OK
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;反向的转换则需要 &lt;code&gt;static_cast&lt;&#x2F;code&gt;，且如果用基类没有该 member，但试图用这个 ptr 访问基类的 member，是 undefined behavior&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Base {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Derived : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Base &lt;&#x2F;span&gt;&lt;span&gt;{ Node node; };
&lt;&#x2F;span&gt;&lt;span&gt;Node Derived::* derived_ptr = &amp;amp;Derived::node;
&lt;&#x2F;span&gt;&lt;span&gt;Node Base::* base_ptr = static_cast&amp;lt;Node Base::*&amp;gt;(derived_ptr); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Derived derived;
&lt;&#x2F;span&gt;&lt;span&gt;derived.*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derived_ptr&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Base base;
&lt;&#x2F;span&gt;&lt;span&gt;base.*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_ptr&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; UB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>wolfSSL 使用</title>
        <published>2024-12-14T00:00:00+00:00</published>
        <updated>2024-12-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/work/misc/wolfssl/"/>
        <id>https://yechenz37.tech/work/misc/wolfssl/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/work/misc/wolfssl/">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;c++ 写 TLS 客户端，openssl 实在是有些丑，另外也希望优化加解密性能，遂研究了一下 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;&quot;&gt;wolfSSL&lt;&#x2F;a&gt; 的使用，因为看它：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;index.html&quot;&gt;文档&lt;&#x2F;a&gt;齐全&lt;&#x2F;li&gt;
&lt;li&gt;有个&lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;forums&#x2F;&quot;&gt;支持社区&lt;&#x2F;a&gt;且上面有人回答&lt;&#x2F;li&gt;
&lt;li&gt;据说性能比 openssl 好，参见 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;docs&#x2F;benchmarks&#x2F;&quot;&gt;benchmark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;an-zhuang-ji-bian-yi-xuan-xiang&quot;&gt;安装及编译选项&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;yuan-ma-la-qu&quot;&gt;源码拉取&lt;&#x2F;h3&gt;
&lt;p&gt;官网有个 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;download&#x2F;&quot;&gt;Download&lt;&#x2F;a&gt; 页面，可以下载源码，其 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wolfSSL&#x2F;wolfssl&#x2F;releases&#x2F;tag&#x2F;v5.7.4-stable&quot;&gt;github release&lt;&#x2F;a&gt; 页也能拉源码，二者在 &lt;code&gt;configure&lt;&#x2F;code&gt; 时略有不同：前者可以直接 &lt;code&gt;configure&lt;&#x2F;code&gt;，后者需要先 &lt;code&gt;.&#x2F;autogen.sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以后者为例&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;github.com&#x2F;wolfSSL&#x2F;wolfssl&#x2F;archive&#x2F;refs&#x2F;tags&#x2F;v5.7.4-stable.tar.gz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -O&lt;&#x2F;span&gt;&lt;span&gt; wolfssl-5.7.4-stable.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tar -xf&lt;&#x2F;span&gt;&lt;span&gt; wolfssl-5.7.4-stable.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; wolfssl-5.7.4-stable &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;autogen.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bian-yi&quot;&gt;编译&lt;&#x2F;h3&gt;
&lt;p&gt;大概是因为 wolfSSL 在设计之初是考虑给嵌入式设备用的，支持非常多的编译选项，所以非常可定制，当然也会导致刚开始用的时候也会比较 confusing，所有选项参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;chapter02.html&quot;&gt;Building wolfSSL&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;根据我的用例，我选择了如下选项，它们的作用分别是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--enable-tls13&lt;&#x2F;code&gt; 启用 tls1.3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--disable-harden&lt;&#x2F;code&gt; (性能)禁用安全强化&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--enable-intelasm&lt;&#x2F;code&gt; (性能)启用 intel 指令集加速，在我的 intel 机器上测试性能改进很显著&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--enable-aesni --enable-sp --enable-sp-asm&lt;&#x2F;code&gt; (性能)启用各种加速，不过这些在我的测试中并没有带来显著提升&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--enable-singlethreaded&lt;&#x2F;code&gt; (性能)如果能保证进程不会并发访问 wolfssl，可以启用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--enable-ed25519&lt;&#x2F;code&gt; 因为用到了 ed25519 相关功能&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--enable-opensslall&lt;&#x2F;code&gt; 因为旧的代码是 openssl 写的，启用这个后会暴露非常多 openssl 的兼容接口，基本上可以无缝迁移
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--enable-opensslextra&lt;&#x2F;code&gt; 我没有启用这个选项，但是提一嘴，因为它实际上是暴露比 &lt;code&gt;opensslall&lt;&#x2F;code&gt; 更多的兼容接口(&lt;code&gt;opensslall&lt;&#x2F;code&gt; 虽然叫 all 但不是它的超集)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CFLAGS=&quot;-DLARGE_STATIC_BUFFERS&quot;&lt;&#x2F;code&gt; 启用这个选项后可以减少 &lt;code&gt;malloc&lt;&#x2F;code&gt;，参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;chapter09.html&quot;&gt;Library Design&lt;&#x2F;a&gt; 的 Input and Output Buffers 章节&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--libdir=&#x2F;usr&#x2F;local&#x2F;lib64&lt;&#x2F;code&gt; 指定安装路径&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;上面的选项里，性能相关的选项，除了 &lt;code&gt;enable-intelasm&lt;&#x2F;code&gt; 测试后有明显提升，其他选项均是看文档写了可能提升 performance 才启用的，但实际测试改进可能不显著，建议自己写个 benchmark 然后每启用一个选项测试一遍&lt;&#x2F;p&gt;
&lt;p&gt;另外我只关心 TLS Application 相关的性能，即握手完成后对称加解密的过程，所以只测了这个&lt;&#x2F;p&gt;
&lt;p&gt;完整的 configure 命令如下，包含了编译安装&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;configure --enable-tls13 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --disable-harden &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --enable-intelasm&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--enable-aesni &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --enable-sp --enable-sp-asm &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --enable-singlethreaded &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --enable-opensslall &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --enable-ed25519 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --libdir&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;usr&#x2F;local&#x2F;lib64 \
&lt;&#x2F;span&gt;&lt;span&gt;    CFLAGS=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-DLARGE_STATIC_BUFFERS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make -j8 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h3&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wolfSSL&#x2F;wolfssl-examples&#x2F;tree&#x2F;master&quot;&gt;wolfssl-examples&lt;&#x2F;a&gt;，用例非常全&lt;&#x2F;p&gt;
&lt;p&gt;在我的使用场景中，基本上只要把 openssl 头文件换成&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wolfssl&#x2F;options.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 必须在所有 wolfssl include 之前
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wolfssl&#x2F;ssl.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后编译链接时把 &lt;code&gt;-lcrypto -lssl&lt;&#x2F;code&gt; 换成 &lt;code&gt;-lwolfssl&lt;&#x2F;code&gt; 即可，由于启用了 &lt;code&gt;--enable-opensslall&lt;&#x2F;code&gt;，所以基本上绝大多数 openssl 的 symbol 都可以直接使用，其会被替换成 wolfssl 的，例如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;SSL_CTX WOLFSSL_CTX
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;SSL_new wolfSSL_new
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;i-o-callback&quot;&gt;I&#x2F;O Callback&lt;&#x2F;h4&gt;
&lt;p&gt;原本的 openssl 的代码里，I&#x2F;O 用了 BIO，在启用 &lt;code&gt;--enable-opensslall&lt;&#x2F;code&gt; 后，wolfSSL 也提供 BIO 接口，也是可以无缝迁移的&lt;&#x2F;p&gt;
&lt;p&gt;但是看文档发现它还提供了 I&#x2F;O Callback 接口，参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;chapter05.html&quot;&gt;Portability&lt;&#x2F;a&gt; 的 Custom Input&#x2F;Output Abstraction Layer 章节&lt;&#x2F;p&gt;
&lt;p&gt;此外，在看源码时发现，其所有 I&#x2F;O 都是以 I&#x2F;O Callback 实现的，例如设置 BIO 其实只是设置了 BIO callback，在需要读写时将数据写到 BIO 层。直接用 callback 相比 BIO 应该少了一次 memcpy，出于性能的考量打算使用这个接口&lt;&#x2F;p&gt;
&lt;p&gt;使用也比较简单，可以参考 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wolfSSL&#x2F;wolfssl-examples&#x2F;blob&#x2F;master&#x2F;custom-io-callbacks&quot;&gt;wolfssl-examples&#x2F;custom-io-callbacks&lt;&#x2F;a&gt;，它实现了通过文件而非 socket 作为 I&#x2F;O 进行 SSL 通信的例子&lt;&#x2F;p&gt;
&lt;p&gt;两个 callback 的定义如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef int &lt;&#x2F;span&gt;&lt;span&gt;(*CallbackIORecv)(WOLFSSL *ssl, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*ctx);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef int &lt;&#x2F;span&gt;&lt;span&gt;(*CallbackIOSend)(WOLFSSL *ssl, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*ctx);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这两个 callback 的语义是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CallbackIORecv: 当 SSL 希望读取数据时，会调这个 cb
&lt;ul&gt;
&lt;li&gt;其中 buf 是 SSL 内部的 buffer，sz 是 SSL 希望读取的字节数，我们需要将读到的指定字节数写入 buf&lt;&#x2F;li&gt;
&lt;li&gt;返回实际读到的字节数或者 &lt;code&gt;WOLFSSL_CBIO_ERR_WANT_READ&lt;&#x2F;code&gt; 表示暂无数据&lt;&#x2F;li&gt;
&lt;li&gt;例如，在 &lt;code&gt;SSL_connect&lt;&#x2F;code&gt; 之后，或者调用 &lt;code&gt;SSL_read&lt;&#x2F;code&gt; 时，即 ssl 希望读取控制消息或者 application data 时，会调用这个 cb&lt;&#x2F;li&gt;
&lt;li&gt;在握手完成后的 &lt;code&gt;SSL_read&lt;&#x2F;code&gt; 过程中，wolfSSL 通常会先调一次 sz 为 5 的 cb 来试图读取消息头，然后再根据消息头的数据长度来读剩下的 payload&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;CallbackIOSend: 当 SSL 希望发送数据时，会调这个 cb
&lt;ul&gt;
&lt;li&gt;其中 buf 是 SSL 希望发出的数据(加密后)&lt;&#x2F;li&gt;
&lt;li&gt;返回实际发送的字节数或者 WOLFSSL_CBIO_ERR_WANT_WRITE 表示需要重试即可&lt;&#x2F;li&gt;
&lt;li&gt;例如，在调用 &lt;code&gt;SSL_connect&lt;&#x2F;code&gt; 之后，或者调用 &lt;code&gt;SSL_write&lt;&#x2F;code&gt; 时，即 ssl 希望发送控制消息或者加密后的 application data 时，会调用这个 cb&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;ctx&lt;&#x2F;code&gt; 则是用户自己设置的 userdata&lt;&#x2F;p&gt;
&lt;p&gt;在实现了自己的 callback 后，通过如下代码设置即可&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSL_SSLSetIORecv&lt;&#x2F;span&gt;&lt;span&gt;(ssl, CBIORecv);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSL_SSLSetIOSend&lt;&#x2F;span&gt;&lt;span&gt;(ssl, CBIOSend);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wolfSSL_SetIOReadCtx(ssl, userdata);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wolfSSL_SetIOWriteCtx(ssl, userdata);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;jian-shao-malloc&quot;&gt;减少 malloc&lt;&#x2F;h4&gt;
&lt;p&gt;wolfSSL 支持自定义 allocator(malloc, free, realloc)，参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;chapter05.html&quot;&gt;Portability&lt;&#x2F;a&gt; 的 Memory Use 章节&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;wolfSSL_SetAllocators&lt;&#x2F;span&gt;&lt;span&gt;(wolfSSL_Malloc_cb  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;malloc_function&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                         wolfSSL_Free_cb    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;free_function&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                         wolfSSL_Realloc_cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;realloc_function&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也因此，我尝试用一个包含调用计数的 malloc 来观察 malloc 的次数，然后发现在不启用 &lt;code&gt;LARGE_STATIC_BUFFERS&lt;&#x2F;code&gt; 的情况下，除了握手阶段以外，每次读或者写 SSL 都会出现一次 malloc(和相应的 free)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;相关讨论 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;forums&#x2F;post8115.html&quot;&gt;Best practice to avoid dynamic memory allocations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果启用 &lt;code&gt;LARGE_STATIC_BUFFERS&lt;&#x2F;code&gt;，每个 &lt;code&gt;SSL&lt;&#x2F;code&gt; 都会有一个固定大小的 &lt;code&gt;staticBuffer&lt;&#x2F;code&gt;，其大小应该是 &lt;code&gt;MAX_RECORD_SIZE&lt;&#x2F;code&gt;，即 16KB，在读写数据时只要这个 buffer 够用，就不会出现 malloc&lt;&#x2F;p&gt;
&lt;p&gt;另一个方法则复杂一些，参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;chapter04.html#enabling-static-buffer-allocation&quot;&gt;Features&lt;&#x2F;a&gt; 的 Static Buffer Allocation Option 章节，大概流程是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;configure&lt;&#x2F;code&gt; 时启用 &lt;code&gt;--enable-staticmemory&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;预先分配两个内存区域，并传递给 wolfSSL，需要调用两遍 &lt;code&gt;wolfSSL_CTX_load_static_memory&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;下面这个 example 是 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;documentation&#x2F;manuals&#x2F;wolfssl&#x2F;chapter04.html#enabling-static-buffer-allocation&quot;&gt;Features&lt;&#x2F;a&gt; 里抄的，但 &lt;code&gt;WOLFMEM_IO_FIXED&lt;&#x2F;code&gt; 应该改成 &lt;code&gt;WOLFMEM_IO_POOL_FIXED&lt;&#x2F;code&gt;&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;WOLFSSL_CTX* ctx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* pass NULL to generate WOLFSSL_CTX *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ret;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;MAX_CONCURRENT_TLS  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;MAX_CONCURRENT_IO   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; GEN_MEM[GEN_MEM_SIZE];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; IO_MEM[IO_MEM_SIZE];　
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* set up a general-purpose buffer and generate WOLFSSL_CTX from it on the first call. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSL_CTX_load_static_memory&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;ctx,                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* set NULL to ctx *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSLv23_client_method_ex&lt;&#x2F;span&gt;&lt;span&gt;(),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* use function with &amp;quot;_ex&amp;quot; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        GEN_MEM, GEN_MEM_SIZE,            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* buffer and its size *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        WOLFMEM_GENERAL,                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* general purpose *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        MAX_CONCURRENT_TLS);              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* max concurrent objects *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* set up a I&#x2F;O-purpose buffer on the second call. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSL_CTX_load_static_memory&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;ctx,                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* make sure ctx is holding the object *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;,                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* pass it to NULL this time *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        IO_MEM, IO_MEM_SIZE,                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* buffer and its size *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        WOLFMEM_IO_FIXED,                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* I&#x2F;O purpose *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        MAX_CONCURRENT_IO);               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* max concurrent objects *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(ret != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; error = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSL_ERR_get_error&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(error != WOLFSSL_ERROR_NONE)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; error_str[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wolfSSL_ERR_error_string&lt;&#x2F;span&gt;&lt;span&gt;(error, error_str);
&lt;&#x2F;span&gt;&lt;span&gt;        throw std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runtime_error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wolfSSL_CTX_load_static_memory error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(error_str));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;之后的使用应该不需要修改，在 &lt;code&gt;statcmemory&lt;&#x2F;code&gt; 够大的情况下，wolfSSL 会自动在上面拿内存，本质上就是实现了一个预分配的 malloc
&lt;ul&gt;
&lt;li&gt;如果内存不够，可能会回退到 malloc，好像可以通过 &lt;code&gt;WOLFSSL_NO_MALLOC&lt;&#x2F;code&gt; 来强制禁止，参考 &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfssl.com&#x2F;crypto-without-mallocs&#x2F;&quot;&gt;Doing Crypto Without Malloc’s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;不过其实 &lt;code&gt;staticmemory&lt;&#x2F;code&gt; 本质上还是要每次都分配内存(只是在预分配的区域上分配)，相比 &lt;code&gt;LARGE_STATIC_BUFFERS&lt;&#x2F;code&gt; 在理想情况下可以完全不分配内存，后者应该更符合我的需求&lt;&#x2F;p&gt;
&lt;p&gt;在我的测试里，在收发数据包较小(因此单次 malloc 成本很低)的情况下，性能表现 &lt;code&gt;LARGE_STATIC_BUFFERS&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;malloc&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;staticmemory&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmark&quot;&gt;Benchmark&lt;&#x2F;h2&gt;
&lt;p&gt;简单测试了 TLS Client 端，在 TLS1.3 用 &lt;code&gt;TLS_AES_128_GCM_SHA256&lt;&#x2F;code&gt; cipher 的情况下，连续收发 256B payload，加解密的耗时(ns)&lt;&#x2F;p&gt;
&lt;p&gt;openssl 作为 baseline, 在使用 BIO 的情况下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 357, max: 11197, avg: 388, p50: 370, p99: 546
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 316, max: 16816, avg: 350, p50: 330, p99: 532
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;wolfSSL 不启用 &lt;code&gt;intelasm&lt;&#x2F;code&gt; 且使用 BIO&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 1074, max: 16198, avg: 1132, p50: 1098, p99: 1335
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 1143, max: 16839, avg: 1205, p50: 1169, p99: 1427
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用 &lt;code&gt;--disable-harden&lt;&#x2F;code&gt;，没有观察到提升&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 1067, max: 11969, avg: 1127, p50: 1092, p99: 1338
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 1139, max: 21007, avg: 1206, p50: 1168, p99: 1433
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用 &lt;code&gt;--enable-intelasm&lt;&#x2F;code&gt;，性能提升显著&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 200, max: 10915, avg: 228, p50: 214, p99: 304
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 263, max: 8928, avg: 309, p50: 296, p99: 407
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用 &lt;code&gt;--enable-sp-asm&lt;&#x2F;code&gt;，没有观察到提升&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 205, max: 16980, avg: 244, p50: 235, p99: 319
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 258, max: 15187, avg: 300, p50: 286, p99: 388
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用 &lt;code&gt;--enable-singlethreaded&lt;&#x2F;code&gt;，提升不大，但似乎是有些提升&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 211, max: 10392, avg: 249, p50: 240, p99: 331
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 238, max: 12050, avg: 281, p50: 261, p99: 373
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在发送方向上用 Callback，接收方向上仍然用 BIO，且启用 &lt;code&gt;LARGE_STATIC_BUFFERS&lt;&#x2F;code&gt;，提升较大&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 124, max: 10720, avg: 131, p50: 131, p99: 138
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 172, max: 11071, avg: 184, p50: 183, p99: 208
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再启用 &lt;code&gt;fast-math&lt;&#x2F;code&gt; 和 &lt;code&gt;fast-huge-math&lt;&#x2F;code&gt;，没有观察到提升&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;encryption_costs: min: 124, max: 17766, avg: 132, p50: 131, p99: 147
&lt;&#x2F;span&gt;&lt;span&gt;decryption_costs: min: 172, max: 16989, avg: 184, p50: 183, p99: 208
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;总结就是使用 IOCallback，启用 &lt;code&gt;LARGE_STATIC_BUFFERS&lt;&#x2F;code&gt;，启用 &lt;code&gt;intelasm&lt;&#x2F;code&gt; 和 &lt;code&gt;singlethreaded&lt;&#x2F;code&gt;(如果确认不会多线程使用)，能达到比较好的加解密性能，比 openssl 快&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>用 tcpdump 和 tshark 分析 wss 流量</title>
        <published>2024-12-13T00:00:00+00:00</published>
        <updated>2024-12-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/work/misc/tcpdump-tshark-wss/"/>
        <id>https://yechenz37.tech/work/misc/tcpdump-tshark-wss/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/work/misc/tcpdump-tshark-wss/">&lt;h2 id=&quot;xu-qiu&quot;&gt;需求&lt;&#x2F;h2&gt;
&lt;p&gt;用 tcpdump 抓本地所有 wss 流量并得到对应的时间戳和明文&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-xian&quot;&gt;实现&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-ssl-keylog&quot;&gt;1. SSL Keylog&lt;&#x2F;h3&gt;
&lt;p&gt;为了解密 TLS 流量，需要得到每个会话的 keylog&lt;&#x2F;p&gt;
&lt;p&gt;如果 TLS 是自己写的，以 c++ openssl 为例，可以通过 &lt;code&gt;SSL_CTX_set_keylog_callback&lt;&#x2F;code&gt; 设置 keylog 回调，直接将输出的 keylog 写入文件即可。无须维护 keylog 和会话的对应关系。&lt;&#x2F;p&gt;
&lt;p&gt;假设最后得到的 keylog 文件是 &lt;code&gt;keylog&lt;&#x2F;code&gt;，be-like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;CLIENT_RANDOM 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
&lt;&#x2F;span&gt;&lt;span&gt;CLIENT_RANDOM 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
&lt;&#x2F;span&gt;&lt;span&gt;CLIENT_RANDOM 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-zhua-bao&quot;&gt;2. 抓包&lt;&#x2F;h3&gt;
&lt;p&gt;为了成功解密 TLS 流量，抓到的包必须包含 TLS handshake，所以抓包需要在目标连接建立以前开始&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tcpdump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -w&lt;&#x2F;span&gt;&lt;span&gt; output.pcap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; any &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp port 443 or tcp port 9443&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# run wss client ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-jie-mi&quot;&gt;3. 解密&lt;&#x2F;h3&gt;
&lt;p&gt;抓包结束后，只要提供 keylog 文件和抓包文件，tshark 会自动解密并输出明文&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tshark -r&lt;&#x2F;span&gt;&lt;span&gt; output.pcap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tls.keylog_file:.&#x2F;keylog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -Y&lt;&#x2F;span&gt;&lt;span&gt; websocket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -T&lt;&#x2F;span&gt;&lt;span&gt; fields&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -e&lt;&#x2F;span&gt;&lt;span&gt; frame.time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -e&lt;&#x2F;span&gt;&lt;span&gt; websocket.payload.text
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;yu-dao-de-wen-ti&quot;&gt;遇到的问题&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;truncated&quot;&gt;truncated&lt;&#x2F;h3&gt;
&lt;p&gt;一开始 &lt;code&gt;tshark -e text&lt;&#x2F;code&gt; 来获取明文，发现 websocket payload 超出 226B 的部分会被截断，并且输出前会展示 [truncated] 或者 [...]，&lt;a href=&quot;https:&#x2F;&#x2F;osqa-ask.wireshark.org&#x2F;questions&#x2F;43023&#x2F;want-to-use-tshark-to-decode-a-specific-packet-and-do-not-truncate-lines&#x2F;&quot;&gt;原因&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;解决方法参考 &lt;a href=&quot;https:&#x2F;&#x2F;ask.wireshark.org&#x2F;question&#x2F;35302&#x2F;displaying-websocket-traffic-content&#x2F;&quot;&gt;Displaying WebSocket traffic content&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;-e websocket.payload.text&lt;&#x2F;code&gt; 来获取明文&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果一定要用 &lt;code&gt;-e text&lt;&#x2F;code&gt;，可以改源码里的 &lt;code&gt;ITEM_LABEL_LENGTH&lt;&#x2F;code&gt;，然后从源码编译 tshark&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fu&quot;&gt;附&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cong-yuan-ma-bian-yi-tshark-bing-xiu-gai-item-label-length&quot;&gt;从源码编译 tshark，并修改 ITEM_LABEL_LENGTH&lt;&#x2F;h3&gt;
&lt;p&gt;修改 &lt;code&gt;ITEM_LABEL_LENGTH&lt;&#x2F;code&gt; 为 2048:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;diff --git a&#x2F;epan&#x2F;proto.h b&#x2F;epan&#x2F;proto.h
&lt;&#x2F;span&gt;&lt;span&gt;index 0d2a27ee86..42d627c168 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;epan&#x2F;proto.h
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;epan&#x2F;proto.h
&lt;&#x2F;span&gt;&lt;span&gt;@@ -48,7 +48,7 @@ extern &amp;quot;C&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt; WS_DLL_PUBLIC int hf_text_only;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;** the maximum length of a protocol field string representation *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;-#define ITEM_LABEL_LENGTH       240
&lt;&#x2F;span&gt;&lt;span&gt;+#define ITEM_LABEL_LENGTH       2048
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt; #define ITEM_LABEL_UNKNOWN_STR  &amp;quot;Unknown&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译流程&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;gitlab.com&#x2F;wireshark&#x2F;wireshark.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; wireshark
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# setup， 需要根据系统选择脚本，参考 https:&#x2F;&#x2F;www.wireshark.org&#x2F;docs&#x2F;wsdg_html_chunked&#x2F;ChapterSetup.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;tools&#x2F;rpm-setup.sh 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 应用修改，假设修改是 patch.diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; apply patch.diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 编译安装
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; build &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmake&lt;&#x2F;span&gt;&lt;span&gt; ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -DBUILD_wireshark&lt;&#x2F;span&gt;&lt;span&gt;=OFF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>io_uring 网络场景使用</title>
        <published>2024-11-26T00:00:00+00:00</published>
        <updated>2024-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/work/linux/io-uring-network/"/>
        <id>https://yechenz37.tech/work/linux/io-uring-network/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/work/linux/io-uring-network/">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;这两天在工作中发现 &lt;code&gt;epoll&lt;&#x2F;code&gt; + &lt;code&gt;recvmsg&lt;&#x2F;code&gt; 的组合在处理大量网络连接收数据的场景中耗时较长以至于成为了 bottleneck，思考可能是因为 syscall 次数太多，于是考虑 io_uring 能不能解决这个问题。&lt;&#x2F;p&gt;
&lt;p&gt;由于 io_uring 比较新，使用比 &lt;code&gt;epoll&lt;&#x2F;code&gt; 复杂但文档很少，记录一下个人学习后认为比较好的使用方式。仅考虑 C++&#x2F;TCP 场景。这里不会注重解释框架的设计和细节，只是从使用者视角记录 roadmap。&lt;&#x2F;p&gt;
&lt;p&gt;可以先看&lt;a href=&quot;https:&#x2F;&#x2F;yechenz37.tech&#x2F;work&#x2F;linux&#x2F;io-uring-network&#x2F;#%E6%80%BB%E7%BB%93&quot;&gt;总结&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shang-shou&quot;&gt;上手&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎所有 API 都用 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;axboe&#x2F;liburing&quot;&gt;liburing&lt;&#x2F;a&gt; 封装的即可&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;io_uring 本质上是一个 &lt;em&gt;syscall queue&lt;&#x2F;em&gt;：用户可以往请求队列(&lt;em&gt;submission queue&lt;&#x2F;em&gt;)里添加请求，然后期望内核在收到事件并处理后将执行结果写入到响应队列(&lt;em&gt;completion queue&lt;&#x2F;em&gt;)里。队列里的元素分别叫 &lt;em&gt;submission queue entry(SQE)&lt;&#x2F;em&gt; 和 &lt;em&gt;completion queue entry(CQE)&lt;&#x2F;em&gt;。因为这两个队列是内核和用户空间共享内存的，所以读写队列不需要 syscall，这也是我期望其能有高性能的基础，不过在使用之后才发现这不是免费的 :(&lt;&#x2F;p&gt;
&lt;p&gt;使用上围绕一个 &lt;code&gt;struct io_uring&lt;&#x2F;code&gt; 展开，先设置必要的参数初始化这个结构&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;constexpr int&lt;&#x2F;span&gt;&lt;span&gt; ENTRIES = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring ring;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_params params;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memset&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;params, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, sizeof(params));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; params.flags = ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_queue_init_params&lt;&#x2F;span&gt;&lt;span&gt;(ENTRIES, &amp;amp;ring, &amp;amp;params) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;io_uring_queue_init_params&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(EXIT_FAILURE);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ENTRIES&lt;&#x2F;code&gt; 就是 SQ 的大小，而 CQ 默认是两倍 &lt;code&gt;ENTRIES&lt;&#x2F;code&gt; 大，因为考虑一个请求可能会产生多个完成结果。&lt;&#x2F;p&gt;
&lt;p&gt;之后只需要往里面添加 syscall 请求即可，例如希望 TCP 建连：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 正常创建 fd 即可
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* 值得注意的是，在使用 epoll 的时候，习惯把 fd 设成 non-blocking，在使用 io_uring 时就不需要了 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sockfd = ...;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; sockaddr_in server_addr;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 填充 server_addr *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 生成一个 connect 请求 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 由于可用的 sqe 是有限的，需要从 uring 里分配，如果用完了会返回 nullptr *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_sqe *sqe = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_get_sqe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(sqe != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 基本上所有支持的 syscall 都会被命名成 io_uring_prep_xxx 的形式 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_prep_connect&lt;&#x2F;span&gt;&lt;span&gt;(sqe, sockfd, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; sockaddr *)&amp;amp;server_addr, sizeof(server_addr));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 可以像 epoll 一样设置一个 u64 大小的 user_data, 例如指针 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; io_uring_sqe_set_data(sqe, some_ptr);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;user_data
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Op: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uint32_t &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        CONNECT,
&lt;&#x2F;span&gt;&lt;span&gt;        RECV,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    Op op;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sockfd;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;static_assert(sizeof(user_data) == sizeof(__u64));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; user_data data;
&lt;&#x2F;span&gt;&lt;span&gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op &lt;&#x2F;span&gt;&lt;span&gt;= user_data::Op::CONNECT;
&lt;&#x2F;span&gt;&lt;span&gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sockfd &lt;&#x2F;span&gt;&lt;span&gt;= sockfd;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memcpy&lt;&#x2F;span&gt;&lt;span&gt;(sqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_data&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;data, sizeof(data));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 最后需要提交这个请求，内核才会看到这个请求并执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* 注意这是个 syscall，因此如果有多个 sqe 需要提交，在所有 prep 之后调一次即可 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_submit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在默认模式下，内核收到这个请求后，会先立马检查请求需不需要等待，如果不需要就直接执行，否则会延后执行：在较老的 io_uring 实现里，会开一系列内核线程来不断地 &lt;code&gt;poll&lt;&#x2F;code&gt; 目标事件；在新的实现里，在事件就绪后内核会中断用户进程并切到内核态去执行。所谓的执行就是完成对应的 syscall 并把结果写入到 CQ 里这整个动作。&lt;&#x2F;p&gt;
&lt;p&gt;由于这些动作都在内核处理，在用户看来，提交任务之后过一段时间后去读 CQ 就能惊讶地发现请求已经完成了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_cqe *cqe;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_peek_cqe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring, &amp;amp;cqe);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cqe != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 一段时间之后
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 处理事件, 主要看 cqe-&amp;gt;res 和 cqe-&amp;gt;user_data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        * cqe-&amp;gt;res 可以理解为对应 syscall 的返回值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        * cqe-&amp;gt;user_data 用来对应自己的事件 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; user_data data;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memcpy&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;data, cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_data&lt;&#x2F;span&gt;&lt;span&gt;, sizeof(data));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;op: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, sockfd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, res: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;, data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sockfd&lt;&#x2F;span&gt;&lt;span&gt;, cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 处理完后，需要消费掉这个 CQE *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_cqe_seen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring, cqe);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这就是 io_uring 的基本使用方式了，连接建立之后，当然希望开始收数据，流程是类似的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_cqe *cqe;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_peek_cqe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring, &amp;amp;cqe);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cqe != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 一段时间之后
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; user_data data;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memcpy&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;data, cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_data&lt;&#x2F;span&gt;&lt;span&gt;, sizeof(data));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 处理完后，需要消费掉这个 CQE *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_cqe_seen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring, cqe);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 处理事件, 主要看 cqe-&amp;gt;res 和 cqe-&amp;gt;user_data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        * cqe-&amp;gt;res 可以理解为对应 syscall 的返回值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        * cqe-&amp;gt;user_data 用来对应自己的事件 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op &lt;&#x2F;span&gt;&lt;span&gt;== user_data::Op::CONNECT)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 错误处理 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 建连成功, 准备收数据 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_sqe *sqe = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_get_sqe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(sqe != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 注意, 这里的 buffer 需要是每个 sqe 独占的
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;            * 因此可以管理一个 per-connection 的 buffer *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_prep_recv&lt;&#x2F;span&gt;&lt;span&gt;(sqe, data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sockfd&lt;&#x2F;span&gt;&lt;span&gt;, buffer, sizeof(buffer), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; user_data data;
&lt;&#x2F;span&gt;&lt;span&gt;            data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op &lt;&#x2F;span&gt;&lt;span&gt;= user_data::Op::RECV;
&lt;&#x2F;span&gt;&lt;span&gt;            data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sockfd &lt;&#x2F;span&gt;&lt;span&gt;= data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sockfd&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;memcpy&lt;&#x2F;span&gt;&lt;span&gt;(sqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_data&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;data, sizeof(data));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op &lt;&#x2F;span&gt;&lt;span&gt;== user_data::Op::RECV)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 错误或者连接关闭 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 处理收到的数据 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;recv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bytes: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%*s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, cqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, buffer);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 重新准备一个 recv 请求 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct io_uring_sqe *sqe = ...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 提交刚才 prep 的请求 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_submit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zui-jia-shi-jian&quot;&gt;最佳实践&lt;&#x2F;h2&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;axboe&#x2F;liburing&#x2F;wiki&#x2F;io_uring-and-networking-in-2023&quot;&gt;io_uring and networking in 2023&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ioring-setup-defer-taskrun&quot;&gt;IORING_SETUP_DEFER_TASKRUN&lt;&#x2F;h3&gt;
&lt;p&gt;前面提到，io_uring 较新实现的默认模式里，事件 ready 后内核会中断用户进程，切换到内核态执行任务，所以看上去用户没有执行任何 syscall 就能 peek 到 CQE，但其实中间已经被打断过了。这样不仅没有减少切换到内核的开销，而且被打断的时间是不可控的。所以在默认模式下，io_uring 性能大概率不如 epoll。&lt;&#x2F;p&gt;
&lt;p&gt;为了避免这个问题，可以在初始化 io_uring 的时候设置 &lt;code&gt;IORING_SETUP_DEFER_TASKRUN&lt;&#x2F;code&gt; 标志(需要和 &lt;code&gt;IORING_SETUP_SINGLE_ISSUER&lt;&#x2F;code&gt; 一起设置)。这个标志的含义是，所有事件都不会再打断用户进程，而是会在用户显式指定内核处理之后才会被处理。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_params params;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memset&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;params, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, sizeof(params));
&lt;&#x2F;span&gt;&lt;span&gt;params.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags &lt;&#x2F;span&gt;&lt;span&gt;= IORING_SETUP_DEFER_TASKRUN | IORING_SETUP_SINGLE_ISSUER;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_queue_init_params&lt;&#x2F;span&gt;&lt;span&gt;(ENTRIES, &amp;amp;ring, &amp;amp;params);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 告知内核执行 pending 的请求
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* 最原始的方法是用 io_uring_enter 结合 IORING_ENTER_GETEVENTS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* 不过 liburing 里有很多替代, 例如 io_uring_wait_*, io_uring_submit_and_wait 等等
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* 因为我的使用场景中, 最常见的 case 就是在事件循环里不断地 tick, 每次 tick 都会 submit 和 enter(GETEVENTS)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* 所以用 io_uring_submit_and_get_events 是最符合语义的 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_submit_and_get_events&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; peek CQEs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我觉得可以把 &lt;code&gt;io_uring_submit_and_get_events&lt;&#x2F;code&gt; 理解成 &lt;code&gt;epoll_wait&lt;&#x2F;code&gt; 和遍历所有 &lt;code&gt;epoll_event&lt;&#x2F;code&gt; 并处理 IO 这两个动作打包到一起。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ioring-feat-fast-poll&quot;&gt;IORING_FEAT_FAST_POLL&lt;&#x2F;h3&gt;
&lt;p&gt;io_uring 内部到底是使用多个内核线程还是中断用户进程，和这个标志相关。&lt;code&gt;FAST_POLL&lt;&#x2F;code&gt; 指代的是 io_uring 的 &lt;code&gt;internal polling mechanism&lt;&#x2F;code&gt;，可以理解为在内核做了类似 &lt;code&gt;epoll&lt;&#x2F;code&gt; 和 IO 的工作，来完成检测事件 ready 和处理 IO 并生产 CQE 的整套动作，这个实现应当比产生多个内核线程更高效。这个特性和内核版本有关，在 5.7 以后可用。&lt;&#x2F;p&gt;
&lt;p&gt;这个功能不需要手动开启，但是可以在 &lt;code&gt;io_uring_queue_init_params&lt;&#x2F;code&gt; 后检查 &lt;code&gt;params.features &amp;amp; IORING_FEAT_FAST_POLL&lt;&#x2F;code&gt; 来判断是否支持。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-li-cqes&quot;&gt;遍历 CQEs&lt;&#x2F;h3&gt;
&lt;p&gt;比起每次 peek 一个 CQE 再 seen，可以使用 &lt;code&gt;io_uring_for_each_cqe&lt;&#x2F;code&gt; 来遍历所有 CQE，然后用 &lt;code&gt;io_uring_cq_advance&lt;&#x2F;code&gt; 来一次性消费。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_submit_and_get_events&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; head;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_cqe *cqe;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_for_each_cqe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring, head, cqe) {
&lt;&#x2F;span&gt;&lt;span&gt;        ++count;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 事件处理 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_cq_advance&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring, count);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ring-provide-buffer&quot;&gt;Ring Provide Buffer&lt;&#x2F;h3&gt;
&lt;p&gt;之前提到收数据时，需要每个 sqe 独占一个 buffer，因为不知道哪个请求会先完成，因此也没法保证不会竞争使用 buffer。provide buffer 可以解决这个问题。&lt;&#x2F;p&gt;
&lt;p&gt;其思想是&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;初始化一个 buffer pool，里面有一堆可用的 buffer entry&lt;&#x2F;li&gt;
&lt;li&gt;在 prep 需要 buffer 的请求时告知 io_uring，在请求需要 IO 时自己从 buffer pool 里取用&lt;&#x2F;li&gt;
&lt;li&gt;用户能在 CQE 里知道这次 IO 的数据在哪个 buffer 里&lt;&#x2F;li&gt;
&lt;li&gt;消费完成后将 buffer 归还到 buffer pool 里&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;代码例子&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;BUF_SHIFT       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;BUFFER_SIZE     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; BUF_SHIFT)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;BUFFERS         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4096
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;BGID            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 保存 provide buffer 相关的上下文 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;provide_buffer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_buf_ring *buf_ring;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*buffer_base;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; buf_ring_size;
&lt;&#x2F;span&gt;&lt;span&gt;} pb;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 获取某个 buffer, index 可以唯一标识一个 buffer *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_buffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; provide_buffer *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; pb-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer_base &lt;&#x2F;span&gt;&lt;span&gt;+ (idx &amp;lt;&amp;lt; BUF_SHIFT);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 初始化 buffer pool, 其中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* BUFFERS 是 buffer pool 里 entry 的数量, 每个 entry 可以用 index 唯一标示
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* BGID 是这个 buffer pool 的 唯一标示 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup_buffer_pool&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ring&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ret, i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*mapped;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_buf_reg reg = {
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ring_addr &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ring_entries &lt;&#x2F;span&gt;&lt;span&gt;= BUFFERS,
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bgid &lt;&#x2F;span&gt;&lt;span&gt;= BGID,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring_size &lt;&#x2F;span&gt;&lt;span&gt;= (sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_buf) + BUFFER_SIZE) * BUFFERS;
&lt;&#x2F;span&gt;&lt;span&gt;    mapped = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mmap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring_size&lt;&#x2F;span&gt;&lt;span&gt;, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(mapped == MAP_FAILED) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;buf_ring mmap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(EXIT_FAILURE);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_buf_ring *)mapped;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_init&lt;&#x2F;span&gt;&lt;span&gt;(pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    reg = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_buf_reg) {
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ring_addr &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt;)pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ring_entries &lt;&#x2F;span&gt;&lt;span&gt;= BUFFERS,
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bgid &lt;&#x2F;span&gt;&lt;span&gt;= BGID,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer_base &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span&gt;*)pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring &lt;&#x2F;span&gt;&lt;span&gt;+ sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_buf) * BUFFERS;
&lt;&#x2F;span&gt;&lt;span&gt;    ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_register_buf_ring&lt;&#x2F;span&gt;&lt;span&gt;(ring, &amp;amp;reg, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(ret) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;buf_ring init failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(EXIT_FAILURE);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; BUFFERS; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_add&lt;&#x2F;span&gt;&lt;span&gt;(pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_buffer&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;pb, i), BUFFER_SIZE, i, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_mask&lt;&#x2F;span&gt;&lt;span&gt;(BUFFERS), i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_advance&lt;&#x2F;span&gt;&lt;span&gt;(pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring&lt;&#x2F;span&gt;&lt;span&gt;, BUFFERS);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 归还一个 buffer *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;recycle_buffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_add&lt;&#x2F;span&gt;&lt;span&gt;(pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_buffer&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;pb, idx), BUFFER_SIZE, idx, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_mask&lt;&#x2F;span&gt;&lt;span&gt;(BUFFERS), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_buf_ring_advance&lt;&#x2F;span&gt;&lt;span&gt;(pb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_ring&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 使用 provide buffer 的 recv 例子 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_sqe *sqe = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_get_sqe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ring);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(sqe != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_prep_recv&lt;&#x2F;span&gt;&lt;span&gt;(sqe, sockfd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_sqe_set_flags&lt;&#x2F;span&gt;&lt;span&gt;(sqe, IOSQE_BUFFER_SELECT); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 告知使用 provide buffer
&lt;&#x2F;span&gt;&lt;span&gt;    sqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_group &lt;&#x2F;span&gt;&lt;span&gt;= BGID; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 告知使用哪个 buffer pool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;multi-shot&quot;&gt;Multi-shot&lt;&#x2F;h3&gt;
&lt;p&gt;像收数据或是 TCP server accept 这种场景，基本上写起来都是 prep 并等待完成，完成之后马上重新 prep 一次。对于这种操作，io_uring 提供了 multishot 模式：prep 一次之后，这个请求可以被重复触发，直到出错或被用户取消。&lt;&#x2F;p&gt;
&lt;p&gt;对于 &lt;code&gt;recv_multishot&lt;&#x2F;code&gt;，因为每次触发都需要一个额外的 buffer，所以必须配合 &lt;a href=&quot;https:&#x2F;&#x2F;yechenz37.tech&#x2F;work&#x2F;linux&#x2F;io-uring-network&#x2F;#ring-provide-buffer&quot;&gt;provide buffer&lt;&#x2F;a&gt; 使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_socket_recv_multishot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ring&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; io_uring_sqe *sqe = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_get_sqe&lt;&#x2F;span&gt;&lt;span&gt;(ring);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(sqe != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_prep_recv_multishot&lt;&#x2F;span&gt;&lt;span&gt;(sqe, fd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io_uring_sqe_set_flags&lt;&#x2F;span&gt;&lt;span&gt;(sqe, flags | IOSQE_BUFFER_SELECT);
&lt;&#x2F;span&gt;&lt;span&gt;    sqe-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf_group &lt;&#x2F;span&gt;&lt;span&gt;= BGID;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;timeout&quot;&gt;Timeout&lt;&#x2F;h3&gt;
&lt;p&gt;对于 connect，可能会希望给其设置一个 timeout，&lt;code&gt;io_uring_prep_link_timeout&lt;&#x2F;code&gt; 挺适合这种场景。&lt;&#x2F;p&gt;
&lt;p&gt;基本思路是，将一个 timeout 请求和另一个(组)请求绑定到一起，如果时间到了对应事件还没(全部)完成，就触发 timeout 并取消所有绑定的请求；否则取消 timeout。&lt;&#x2F;p&gt;
&lt;p&gt;例子可以在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;axboe&#x2F;liburing&#x2F;blob&#x2F;master&#x2F;test&#x2F;link-timeout.c&quot;&gt;liburing&#x2F;test&#x2F;link-timeout.c&lt;&#x2F;a&gt; 测试代码里找到。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cancel&quot;&gt;Cancel&lt;&#x2F;h3&gt;
&lt;p&gt;这其实是一个疑点记录，io_uring 可以通过 fd 或者 user_data 作为 key 来 cancel 请求，其&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man3&#x2F;io_uring_prep_cancel.3.html#top_of_page&quot;&gt;文档&lt;&#x2F;a&gt;描述：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the cancelation request uses async request syntax, the
kernel side of the cancelation is always run synchronously. It is
guaranteed that a CQE is always generated by the time the cancel
request has been submitted. If the cancelation is successful, the
completion for the request targeted for cancelation will have
been posted by the time submission returns. For -EALREADY it may
take a bit of time to do so. For this case, the caller must wait
for the canceled request to post its completion event.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;即 cancel 被 submit 的时候就会被执行，保证 submit 完 CQ 里就会有 cancel 成功与否的结果。如果事件被成功 cancel，CQ 里也会有这些事件的 CQE。如果 cancel 返回 -EALREADY，则说明其他事件的 CQE 还没生成，但是已经在 cancel 中了。&lt;&#x2F;p&gt;
&lt;p&gt;疑点就在于，文档似乎没有说明如果一个事件已经在 CQ 里但还未被消费，此时 cancel 会不会影响这个 CQE，这决定了我能否认为 cancel 之后再消费 CQ 一定不会消费到 cancel 的事件，进而影响了用户空间 user_data 的生命周期管理。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;说了那么多，尝试用 io_uring 写了 TCP echo 吞吐测试，发现在连接数较低或者默认模式下，io_uring 性能不如 epoll，只有在连接数较多且配合 defer taskrun 的情况下，io_uring 才有优势。用 multishot 也有少量收益，但不如 defer taskrun 大，而且必须配合 provide buffer 也增加了使用难度。&lt;&#x2F;p&gt;
&lt;p&gt;在实际项目里，用 io_uring，结合 defer taskrun 并支持 fast poll，不启用 multishot 和 provide buffer 的情景下，性能比 epoll 差 :&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;网上也有一些相关的讨论&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.alibabacloud.com&#x2F;blog&#x2F;io-uring-vs--epoll-which-is-better-in-network-programming_599544#:~:text=epoll%3A%20s%20%2B%20w-,io_uring%3A%20(t%20%2B%20s)%20%2F%20n,scenario%20is%20better%20than%20epoll&amp;#x27;s&quot;&gt;io_uring vs. epoll – Which Is Better in Network Programming?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;axboe&#x2F;liburing&#x2F;issues&#x2F;189&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;frevib&#x2F;io_uring-echo-server&#x2F;issues&#x2F;8&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总之，我认为 io_uring 在网络场景下不一定能得到预期收益，建议结合实际场景测试后再决定是否使用。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mikrotik 端口转发保留 srcip</title>
        <published>2024-11-01T00:00:00+00:00</published>
        <updated>2024-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/mikrotik/port-forwarding-with-srcip/"/>
        <id>https://yechenz37.tech/misc/mikrotik/port-forwarding-with-srcip/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/mikrotik/port-forwarding-with-srcip/">&lt;p&gt;为了暴露家里的服务，做了 9443 上的端口转发，在设置访问规则时，发现即使设置了类似 LAN 免密这样的规则，从外网访问也会命中&lt;&#x2F;p&gt;
&lt;p&gt;应该是因为 dst-nat 配置错误导致 src-ip 被改成了网关 ip&lt;&#x2F;p&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;forum.mikrotik.com&#x2F;viewtopic.php?t=158480&quot;&gt;NAT IP don&#x27;t show real visitors IP&lt;&#x2F;a&gt;，将 masquerade 的 out-interface 设置为 wan 后解决&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Linux 网络时间戳</title>
        <published>2024-10-24T00:00:00+00:00</published>
        <updated>2024-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/work/linux/network-timestamp/"/>
        <id>https://yechenz37.tech/work/linux/network-timestamp/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/work/linux/network-timestamp/">&lt;p&gt;为了衡量机内延迟，希望拿到收发包的时间戳&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wen-dang&quot;&gt;文档&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.kernel.org&#x2F;networking&#x2F;timestamping.html&quot;&gt;Timestamping&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wang-qia-zhi-chi&quot;&gt;网卡支持&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ethtool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -T&lt;&#x2F;span&gt;&lt;span&gt; eth0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt; stamping parameters for eth0:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Capabilities:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;software-transmit&lt;&#x2F;span&gt;&lt;span&gt;     (SOF_TIMESTAMPING_TX_SOFTWARE)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;software-receive&lt;&#x2F;span&gt;&lt;span&gt;      (SOF_TIMESTAMPING_RX_SOFTWARE)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;software-system-clock&lt;&#x2F;span&gt;&lt;span&gt; (SOF_TIMESTAMPING_SOFTWARE)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PTP&lt;&#x2F;span&gt;&lt;span&gt; Hardware Clock: none
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hardware&lt;&#x2F;span&gt;&lt;span&gt; Transmit Timestamp Modes: none
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hardware&lt;&#x2F;span&gt;&lt;span&gt; Receive Filter Modes: none
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即服务器只支持软件时间戳&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-jian-chuo-huo-qu&quot;&gt;时间戳获取&lt;&#x2F;h2&gt;
&lt;p&gt;以 TCP 为例&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rx&quot;&gt;RX&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 创建 socket 后
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 设置 SO_TIMESTAMPING 选项
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; timestamps = SOF_TIMESTAMPING_RX_SOFTWARE | SOF_TIMESTAMPING_SOFTWARE;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setsockopt&lt;&#x2F;span&gt;&lt;span&gt;(sockfd, SOL_SOCKET, SO_TIMESTAMPING, &amp;amp;timestamps, sizeof(timestamps)) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SO_TIMESTAMPING&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 用 recvmsg 接收数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*buf = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new char&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; msghdr msg = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; iovec iov = {buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; control[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_SPACE&lt;&#x2F;span&gt;&lt;span&gt;(sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; timespec))];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg_iov &lt;&#x2F;span&gt;&lt;span&gt;= &amp;amp;iov;
&lt;&#x2F;span&gt;&lt;span&gt;msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg_iovlen &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg_control &lt;&#x2F;span&gt;&lt;span&gt;= control;
&lt;&#x2F;span&gt;&lt;span&gt;msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg_controllen &lt;&#x2F;span&gt;&lt;span&gt;= sizeof(control);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvmsg&lt;&#x2F;span&gt;&lt;span&gt;(sockfd, &amp;amp;msg, MSG_DONTWAIT);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(size == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; errno == EAGAIN)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; cmsg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_FIRSTHDR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;msg); cmsg != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;; cmsg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_NXTHDR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;msg, cmsg))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cmsg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmsg_level &lt;&#x2F;span&gt;&lt;span&gt;== SOL_SOCKET &amp;amp;&amp;amp; cmsg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmsg_type &lt;&#x2F;span&gt;&lt;span&gt;== SO_TIMESTAMPING)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; timespec* ts = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; timespec*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_DATA&lt;&#x2F;span&gt;&lt;span&gt;(cmsg);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;recv at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%.9lf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ts-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tv_sec &lt;&#x2F;span&gt;&lt;span&gt;+ ts-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tv_nsec &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1e-9&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(size &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tx&quot;&gt;TX&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 创建 socket 后
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 设置 SO_TIMESTAMPING 选项
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; timestamps = SOF_TIMESTAMPING_TX_SOFTWARE | SOF_TIMESTAMPING_SOFTWARE;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setsockopt&lt;&#x2F;span&gt;&lt;span&gt;(connfd, SOL_SOCKET, SO_TIMESTAMPING, &amp;amp;timestamps, sizeof(timestamps)) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SO_TIMESTAMPING&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送数据后, 时间戳会被写入到 ERRQUEUE 中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(connfd, buf, size);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read tx timestamp
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* For transmit timestamps the outgoing packet is looped back to the socket’s error queue with the send timestamp(s) attached.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * A process receives the timestamps by calling recvmsg() with flag MSG_ERRQUEUE set and with a msg_control buffer sufficiently large to receive the relevant metadata structures.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;         * The recvmsg call returns the original outgoing data packet with two ancillary messages attached. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; msghdr msg = {};
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; control[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_SPACE&lt;&#x2F;span&gt;&lt;span&gt;(sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; timespec))];
&lt;&#x2F;span&gt;&lt;span&gt;        msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg_control &lt;&#x2F;span&gt;&lt;span&gt;= control;
&lt;&#x2F;span&gt;&lt;span&gt;        msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg_controllen &lt;&#x2F;span&gt;&lt;span&gt;= sizeof(control);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvmsg&lt;&#x2F;span&gt;&lt;span&gt;(connfd, &amp;amp;msg, MSG_ERRQUEUE) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;recvmsg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; cmsg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_FIRSTHDR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;msg); cmsg != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;; cmsg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_NXTHDR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;msg, cmsg))
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cmsg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmsg_level &lt;&#x2F;span&gt;&lt;span&gt;== SOL_SOCKET &amp;amp;&amp;amp; cmsg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmsg_type &lt;&#x2F;span&gt;&lt;span&gt;== SCM_TIMESTAMPING)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; timespec *ts = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; timespec *)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMSG_DATA&lt;&#x2F;span&gt;&lt;span&gt;(cmsg);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bytes, tx timestamp: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%.9lf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, size, ts-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tv_sec &lt;&#x2F;span&gt;&lt;span&gt;+ ts-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tv_nsec &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1e-9&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ce-shi&quot;&gt;测试&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ruan-jian-shi-jian-chuo-overhead&quot;&gt;软件时间戳 overhead&lt;&#x2F;h3&gt;
&lt;p&gt;在测试机上开启 RX 时间戳选项并通过 &lt;code&gt;recvmsg&lt;&#x2F;code&gt; 读取时间戳的 overhead 约为 100ns&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ruan-jian-shi-jian-chuo-sheng-cheng-shi-jian-dian&quot;&gt;软件时间戳生成时间点&lt;&#x2F;h3&gt;
&lt;p&gt;文档描述&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Request rx timestamps when data enters the kernel. These timestamps are generated just after a device driver hands a packet to the kernel receive stack.&lt;&#x2F;p&gt;
&lt;p&gt;即内核从驱动拿到数据包后就生成时间戳&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;对于字节流&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The SO_TIMESTAMPING interface supports timestamping of bytes in a bytestream. Each request is interpreted as a request for when the entire contents of the buffer has passed a timestamping point. That is, for streams option SOF_TIMESTAMPING_TX_SOFTWARE will record when all bytes have reached the device driver, regardless of how many packets the data has been converted into.&lt;&#x2F;p&gt;
&lt;p&gt;即字节流的时间戳会 &amp;gt;= 最后一个字节对应的包的时间戳&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;实际测试如下场景：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;发送端几次发送间隔较久(1s)，预期几个包也会间隔较久到达，如果内核立即处理并给每个包打时间戳，那么读到的 RX 时间戳间隔也应当是 1s。&lt;&#x2F;li&gt;
&lt;li&gt;但接收方如果不及时读数据，而是 sleep 一段时间等发送方发完再读，会发现有连续好几秒的包(定义包为发送端的一次发送)有相同的时间戳，且值大于等于最后一个包的时间戳。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;说明这些数据可能还是在驱动或者内核排队了，并且内核进入打时间戳的时机时，这些数据包已经被整合成了一个 skb 或是什么结构，因此一起得到了较晚的时间戳&lt;&#x2F;p&gt;
&lt;p&gt;暂时没有找到获取更准确时间戳的方法&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Synology btrfs 修复</title>
        <published>2024-10-21T00:00:00+00:00</published>
        <updated>2024-10-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/synology/btrfs-repair/"/>
        <id>https://yechenz37.tech/misc/synology/btrfs-repair/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/synology/btrfs-repair/">&lt;p&gt;买的二手 DS918+，两条内存中有一条坏，由于开机时没 memtest 且能点亮，迁数据过程中一直没发现问题&lt;&#x2F;p&gt;
&lt;p&gt;中途报了个 checksum mismatch，还不以为然&lt;&#x2F;p&gt;
&lt;p&gt;然后某次重启之后一个存储池变成 Read-Only 了，但其实此时访问那个卷的数据都会 IO 错误&lt;&#x2F;p&gt;
&lt;p&gt;查资料看到 &lt;a href=&quot;https:&#x2F;&#x2F;zyyme.com&#x2F;btrfs-fix.html&quot;&gt;Btrfs修复&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;照着操作一遍之后重启就能用了，不过后续又报了几个 checksum mismatch，相关的照片确实也损坏了&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Synology 使用 m2 ssd 作为存储盘</title>
        <published>2024-10-21T00:00:00+00:00</published>
        <updated>2024-10-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/synology/m2-ssd/"/>
        <id>https://yechenz37.tech/misc/synology/m2-ssd/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/synology/m2-ssd/">&lt;p&gt;使用 007revad 的脚本&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;007revad&#x2F;Synology_M2_volume&quot;&gt;Synology_M2_volume&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;007revad&#x2F;Synology_HDD_db&quot;&gt;Synology_HDD_db&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在 DS918+, DSM 7.2 上测试&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;先跑 &lt;code&gt;Synology_M2_volume&lt;&#x2F;code&gt; 脚本, 跑完就可以直接建存储池了, 不用重启&lt;&#x2F;li&gt;
&lt;li&gt;然后跑 &lt;code&gt;Synology_HDD_db&lt;&#x2F;code&gt; 脚本, 用的 &lt;code&gt;-nr&lt;&#x2F;code&gt; flag&lt;&#x2F;li&gt;
&lt;li&gt;在计划任务里加一个 开机触发、root 运行的计划, 内容为 &lt;code&gt;&#x2F;path-to-script&#x2F;syno_hdd_db.sh -nr&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;加一个备份任务, 定期把 SSD 的数据备份到 HDD 盘, 免得突然挂了&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>python gc 与循环引用</title>
        <published>2024-09-11T00:00:00+00:00</published>
        <updated>2024-09-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/programming/python/gc-performance/"/>
        <id>https://yechenz37.tech/programming/python/gc-performance/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/programming/python/gc-performance/">&lt;p&gt;在优化日志落盘的任务里，为了避免消费日志队列过慢导致爆队列，其中一个优化是快速消费队列并全部缓存到 deque 里，再慢慢落盘&lt;&#x2F;p&gt;
&lt;p&gt;但测试时发现，虽然理论上 &lt;code&gt;deque&lt;&#x2F;code&gt; 的 &lt;code&gt;append&lt;&#x2F;code&gt; 是 O(1) 的，但实际表现是 append 时不时会变慢(体现为消费队列并 &lt;code&gt;append&lt;&#x2F;code&gt; 变慢导致队列爆掉)，且随着 &lt;code&gt;deque&lt;&#x2F;code&gt; 变大，对应的延迟会变高&lt;&#x2F;p&gt;
&lt;p&gt;这个问题表现类似 &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;2473783&#x2F;is-there-a-way-to-circumvent-python-list-append-becoming-progressively-slower&quot;&gt;is there a way to circumvent python list append becoming progressively slower&lt;&#x2F;a&gt;，所以猜测可能也是 &lt;code&gt;gc&lt;&#x2F;code&gt; 导致的，禁用 &lt;code&gt;gc&lt;&#x2F;code&gt; 后确实不会变慢了，但随后发现引入了内存泄露，即虽然 &lt;code&gt;deque&lt;&#x2F;code&gt; 里缓存的元素被消费完了，但进程内存用量不会下降&lt;&#x2F;p&gt;
&lt;p&gt;由于 &lt;code&gt;gc&lt;&#x2F;code&gt; 只被用于回收有循环引用的对象，所以猜测是项目里的某些对象有循环引用，定位到了如下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._bar
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;AttributeError:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._bar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.c_bar.contents
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 &lt;code&gt;c_bar&lt;&#x2F;code&gt; 是一个 &lt;code&gt;ctypes.POINTER&lt;&#x2F;code&gt;，在命中 &lt;code&gt;AttributeError&lt;&#x2F;code&gt; 时的逻辑会使 &lt;code&gt;self._bar&lt;&#x2F;code&gt; 引用 &lt;code&gt;self.c_bar&lt;&#x2F;code&gt;，产生循环引用，改掉这里后内存泄露消失&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Wechat</title>
        <published>2024-09-05T00:00:00+00:00</published>
        <updated>2024-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/arch/wechat/"/>
        <id>https://yechenz37.tech/misc/arch/wechat/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/arch/wechat/">&lt;h2 id=&quot;20240905-geng-xin&quot;&gt;20240905 更新&lt;&#x2F;h2&gt;
&lt;p&gt;上周某次系统滚动更新后，原先的 v3.8.0.33 由于是 x86 版本，会报 dll 错误，参考了网上的资料均未解决，而切到 x64 版本又有一些小 bug&lt;&#x2F;p&gt;
&lt;p&gt;看到 &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinuxcn.org&#x2F;wiki&#x2F;%E5%BE%AE%E4%BF%A1#%E5%BE%AE%E4%BF%A1_Linux_%E5%8E%9F%E7%94%9F%E7%89%88%E9%87%8D%E6%9E%84&quot;&gt;wiki&lt;&#x2F;a&gt; 更新了重构版的 wechat-uos&lt;&#x2F;p&gt;
&lt;p&gt;发现体验还可以，没有各种字体 bug，唯一的缺点是不能撤回和引用&lt;&#x2F;p&gt;
&lt;h2 id=&quot;20240125geng-xin&quot;&gt;20240125更新&lt;&#x2F;h2&gt;
&lt;p&gt;备忘目前完整的微信安装流程&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;装 wine-for-wechat 和 wine-wechat-setup&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tom-snow&#x2F;wechat-windows-versions&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;tom-snow&#x2F;wechat-windows-versions&lt;&#x2F;a&gt; 找老版本的微信安装包, 例如 Wechat v3.8.0.33
&lt;blockquote&gt;
&lt;p&gt;wine-for-wechat 会默认使用 prefix &#x2F; &#x27;drive_c&#x2F;Program Files&#x2F;Tencent&#x2F;WeChat&#x27; 作为 WeChat.exe 的目录, 安装微信时需要注意, 旧版本微信可能会默认安装到 Program Files x86 下&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;用 wine-wechat-setup 安装微信, 会一并创建 ~&#x2F;.local&#x2F;lib&#x2F;wine-wechat 这个 WINEPREFIX&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;此时安装程序的字体可能为方块, 建议在创建完 WINPREFIX 之后即在字体目录下放置必要的字体, 参考 &lt;a href=&quot;https:&#x2F;&#x2F;blog.gloriousdays.pw&#x2F;2018&#x2F;12&#x2F;01&#x2F;optimize-wine-font-rendering&quot;&gt;https:&#x2F;&#x2F;blog.gloriousdays.pw&#x2F;2018&#x2F;12&#x2F;01&#x2F;optimize-wine-font-rendering&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;字体问题解决后方可设置微信安装目录&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果需要改 dpi 等, 可以 &lt;code&gt;wechat -c&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;archive&quot;&gt;Archive&lt;&#x2F;h2&gt;
&lt;p&gt;更新: 现在使用 com.qq.weixin.spark 包的微信，然后将其用的 wine 替换成 wine-for-wechat&lt;&#x2F;p&gt;
&lt;p&gt;使用打包好的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vufa&#x2F;deepin-wine-wechat-arch&quot;&gt;Deepin Wine Wechat Arch&lt;&#x2F;a&gt;，仓库中已经给出了详细的安装方法、字体更换等&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sway&quot;&gt;Sway&lt;&#x2F;h3&gt;
&lt;p&gt;从 i3 迁移到 sway 后, Deepin Wine Wechat 的微信窗口黑屏, 暂时没找到解决办法, 改用 wine-for-wechat 后解决&lt;&#x2F;p&gt;
&lt;p&gt;安装流程&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;安装 wine-for-wechat, wine-wechat 包, 均在 archlinuxcn 源上&lt;&#x2F;li&gt;
&lt;li&gt;微信官网下载 &lt;code&gt;.exe&lt;&#x2F;code&gt; 安装包&lt;&#x2F;li&gt;
&lt;li&gt;命令行 &lt;code&gt;wechat -i &#x2F;path&#x2F;to&#x2F;wechat_setup.exe&lt;&#x2F;code&gt; 安装微信&lt;&#x2F;li&gt;
&lt;li&gt;安装完成后就能使用, 如果字体有问题, 参考 &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;qin-yu&#x2F;bfd799f2380c875045e7c8b918d02f36&quot;&gt;Ubuntu20.04 Wine 6.0 微信中文显示方块&#x2F;方框&lt;&#x2F;a&gt;, 本质上为如下几步&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;winetricks 安装所有字体和所需 dll&lt;&#x2F;li&gt;
&lt;li&gt;改注册表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;不过仍然没解决 emoji 为方块的问题&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trouble-shotting&quot;&gt;Trouble shotting&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;chuang-kou-yin-ying&quot;&gt;窗口阴影&lt;&#x2F;h4&gt;
&lt;p&gt;换到 i3wm 后，混成器使用了 picom，此时使用 Deepin Wine Wechat 会发现整个窗口被灰色遮罩，且有弧形的黑色阴影，关闭 picom 后上述情况消失，因此判断是 picom 的问题&lt;&#x2F;p&gt;
&lt;p&gt;查阅 arch wiki 上 picom 条目发现，picom 可以针对窗口禁用半透明、阴影等特性，其规则可以细化到匹配窗口名称&lt;&#x2F;p&gt;
&lt;p&gt;首先通过 &lt;code&gt;xprop&lt;&#x2F;code&gt; 查询微信的窗口名:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# xprop
&lt;&#x2F;span&gt;&lt;span&gt;WM_NAME(STRING) = &amp;quot;WeChat&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;WM_CLASS(STRING) = &amp;quot;wechat.exe&amp;quot;, &amp;quot;Wine&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后在 &lt;code&gt;picom.conf&lt;&#x2F;code&gt; 里添加如下规则:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;conf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-conf &quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span&gt;~&#x2F;.config&#x2F;picom&#x2F;picom.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Specify a list of conditions of windows that should have no shadow.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# examples:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   shadow-exclude = &amp;quot;n:e:Notification&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# shadow-exclude = []
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shadow-exclude &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;name = &amp;#39;WeChat&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;class_g = &amp;#39;wechat.exe&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;class_g = &amp;#39;Wine&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;重启 picom 即可&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zi-ti-fa-xu&quot;&gt;字体发虚&lt;&#x2F;h4&gt;
&lt;p&gt;打开 wine 设置&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# &#x2F;opt&#x2F;apps&#x2F;com.qq.weixin.deepin&#x2F;files&#x2F;run.sh winecfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;graphics 选项卡里调高DPI即可&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bu-fen-emoji-wei-fang-kuai&quot;&gt;部分 Emoji 为方块&lt;&#x2F;h4&gt;
&lt;p&gt;尚未解决&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bolognese&#x2F;番茄肉酱(意面)</title>
        <published>2024-06-11T00:00:00+00:00</published>
        <updated>2024-06-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/misc/cook/bolognese/"/>
        <id>https://yechenz37.tech/misc/cook/bolognese/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/misc/cook/bolognese/">&lt;p&gt;综合了以下三个方子&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;post.smzdm.com&#x2F;p&#x2F;akmrpxre&#x2F;&quot;&gt;什么值得买 番茄肉酱意面味道不对？换一种番茄试试—波隆那肉酱意面做法&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=-gF8d-fitkU&quot;&gt;youtube Easy Bolognese Recipe | Jamie Oliver&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;m.xiachufang.com&#x2F;recipe&#x2F;106709924&#x2F;&quot;&gt;下厨房 番茄肉酱意面Bolognese意大利chef亲授&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;cai-liao&quot;&gt;材料&lt;&#x2F;h2&gt;
&lt;p&gt;以下材料适合一个 4-5L 的煮锅，大约能出 14 人份，一般是炖一次分装冷冻&lt;&#x2F;p&gt;
&lt;p&gt;材料可以等比例缩减，肉和菜的比例也可以随意调节(以炖锅能装下为准)，以下是我常用的比例&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-liao&quot;&gt;主料&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;不可以少的材料，三种蔬菜体积差不多就行&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;牛绞肉 + 猪绞肉&lt;strong&gt;共&lt;&#x2F;strong&gt; 1kg，通常 1:1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;整颗&lt;&#x2F;strong&gt;番茄罐头(茄意欧) 400g * 2罐&lt;&#x2F;li&gt;
&lt;li&gt;洋葱一大个(半斤)&lt;&#x2F;li&gt;
&lt;li&gt;西芹两根&lt;&#x2F;li&gt;
&lt;li&gt;萝卜两根&lt;&#x2F;li&gt;
&lt;li&gt;黑胡椒(现磨)，油，盐&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;pei-liao&quot;&gt;配料&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;都是增加风味的，我是全都放了，没有的话做的时候略过即可&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;培根两片&lt;&#x2F;li&gt;
&lt;li&gt;大蒜&lt;&#x2F;li&gt;
&lt;li&gt;意式混合香料(比如可达怡意式混合香料)&lt;&#x2F;li&gt;
&lt;li&gt;肉桂粉&lt;&#x2F;li&gt;
&lt;li&gt;迷迭香&lt;&#x2F;li&gt;
&lt;li&gt;肉豆蔻&lt;&#x2F;li&gt;
&lt;li&gt;番茄膏(茄意欧)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;zuo-fa&quot;&gt;做法&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;全部看完再开始操作，具体操作可以参考那三个方子(因为这里没有图)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;1-zhun-bei-cai-liao&quot;&gt;1. 准备材料&lt;&#x2F;h3&gt;
&lt;p&gt;三种蔬菜剁碎备用，有切碎机&#x2F;绞肉机最好，没有的话参考方子 1. 切&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;有绞肉机的话可以在炒肉的时候再绞，否则提前切好&lt;&#x2F;li&gt;
&lt;li&gt;混在一起就行，三种蔬菜会一起炒&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;有&lt;strong&gt;蒜粒&lt;&#x2F;strong&gt;的话剁碎，有&lt;strong&gt;迷迭香&lt;&#x2F;strong&gt;的话把叶子薅下来剁碎，有&lt;strong&gt;培根&lt;&#x2F;strong&gt;的话切小粒&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-chao&quot;&gt;2. 炒&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;最好是直接在最终炖煮的锅里炒，因为炒的时候会有点糊底，加水炖能把糊底的部分溶解掉&lt;&#x2F;p&gt;
&lt;p&gt;全程需要盯着翻炒，避免糊&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;锅热加油，油多点，至少要覆盖整个锅底，油热炒蒜、培根和迷迭香，中小火别烧焦&lt;&#x2F;p&gt;
&lt;p&gt;出香味后先加牛绞肉炒&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;炒肉是一定会先出很多水的，要有耐心等水都挥发掉，肉才会开始焦黄，焦黄才会香&lt;&#x2F;li&gt;
&lt;li&gt;一直搅拌翻炒，微微粘底无所谓，但别烧糊&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;等牛肉炒出来的水挥发掉一部分、肉变成淡褐色后再加猪肉一起炒，同理会先出很多水&lt;&#x2F;p&gt;
&lt;p&gt;等肉炒出来水都挥发得差不多了，加黑胡椒和盐，黑胡椒往死里加，盐正常用量，继续炒到肉变成焦褐色，参考方子 1. 里的图片&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;这一步应该是整个酱肉味的关键，耐心炒，可能需要十几二十分钟&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;肉到位后加三种蔬菜碎(蔬菜单独炒或和肉一起炒都行)，蔬菜碎也会炒出水，同样需要炒到水挥发干，蔬菜微焦，才会有味道&lt;&#x2F;p&gt;
&lt;p&gt;全都炒到位这一步就完成了&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-tun&quot;&gt;3. 炖&lt;&#x2F;h3&gt;
&lt;p&gt;两罐番茄倒下去，再用番茄的罐子装水(两罐)加下去&lt;&#x2F;p&gt;
&lt;p&gt;加番茄膏，肉桂粉，肉豆蔻粉，意式混合香料，黑胡椒&lt;&#x2F;p&gt;
&lt;p&gt;搅匀，之前有糊底的话用勺子在底下铲几下铲干净&lt;&#x2F;p&gt;
&lt;p&gt;大火烧开转最小火，炖至水收干到酱变得略浓稠即可，一般需要一个多小时。我一般会开盖炖(因为要一直搅)&lt;&#x2F;p&gt;
&lt;p&gt;缓慢多次加盐，到口味合适，盐少了吃的时候可以再加，盐多了不好救，以及如果吃的时候要加帕玛森，由于帕玛森很咸，这里的盐需要适当少点&lt;&#x2F;p&gt;
&lt;p&gt;可以加点糖提鲜&lt;&#x2F;p&gt;
&lt;p&gt;这一步需要注意的是&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;由于固体部分会在炖的时候沉底，一定要一直搅拌(搅的时候用勺子刮到锅底)，否则就会粘底烧糊&lt;&#x2F;li&gt;
&lt;li&gt;锅越薄(不锈钢&#x2F;铝)搅拌越频繁，锅越厚(铸铁&#x2F;陶瓷)搅拌可以越少，但几分钟至少需要搅一次&lt;&#x2F;li&gt;
&lt;li&gt;如果间隔太久固体已经沉底，搅的时候可能会有沸腾的泡泡导致飞溅，要防止烫伤&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;炖到位了分装冷冻即可&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>malloc c++ class 而不调用构造函数引发的 segfault</title>
        <published>2023-01-29T00:00:00+00:00</published>
        <updated>2023-01-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yechenz37.tech/programming/cpp/malloc-cpp-class-cause-segfault/"/>
        <id>https://yechenz37.tech/programming/cpp/malloc-cpp-class-cause-segfault/</id>
        
        <content type="html" xml:base="https://yechenz37.tech/programming/cpp/malloc-cpp-class-cause-segfault/">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;原本有一个纯 C 的库，其某结构体内保存了一个函数指针作为 callback&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;(*output)(...);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为了在 C++ 中方便地使用 lambda 等，我自作主张地将其改成了&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(...)&amp;gt; output;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;起初工作得很好，&lt;code&gt;std::function&lt;&#x2F;code&gt; 在替代函数指针方面非常方便。直到将代码放到另一套环境中时发现会随机 segfault，gdb 调试定位到了该回调相关的部分。一定是遇到了 Undefined Behavior 了&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pai-cha&quot;&gt;排查&lt;&#x2F;h2&gt;
&lt;p&gt;出现问题的代码片段位置不尽相同，但是总是出现在 &lt;strong&gt;给该结构体的 output 成员赋值&lt;&#x2F;strong&gt; 上，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; when creating a empty Foo instance, give it&amp;#39;s member a default value
&lt;&#x2F;span&gt;&lt;span&gt;foo-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output &lt;&#x2F;span&gt;&lt;span&gt;= std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(...)&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;segfault 的 backtrace 最终总是&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;#0  0x0000000000404ce4 in std::_Function_base::~_Function_base (this=0x7fffffffc3c0, __in_chrg=&amp;lt;optimized out&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;#1  0x000000000040ca7e in std::function&amp;lt;int (...)&amp;gt;::~function()
&lt;&#x2F;span&gt;&lt;span&gt;#2  0x00000000004180df in std::function&amp;lt;int(...)&amp;gt;::operator=&amp;lt;::&amp;lt;lambda(...)&amp;gt; &amp;gt;::&amp;lt;lambda(...)&amp;gt; &amp;gt;(struct {...} &amp;amp;&amp;amp;) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即调用 &lt;code&gt;std::function&lt;&#x2F;code&gt; 的 &lt;code&gt;operator=&lt;&#x2F;code&gt; 赋值时，调用了某个 &lt;code&gt;std::function&lt;&#x2F;code&gt; 的析构函数，然后析构函数触发了 segfault。根据赋值的位置，应当是将新的 output 赋值到成员变量时，原本成员变量的 output 需要析构&lt;&#x2F;p&gt;
&lt;p&gt;然后想到因为是纯 C 的库，申请 &lt;code&gt;Foo&lt;&#x2F;code&gt; 的位置均使用 &lt;code&gt;malloc&lt;&#x2F;code&gt;，&lt;code&gt;malloc&lt;&#x2F;code&gt; 默认不会构造结构体及其 member 的构造函数，因此得到的 &lt;code&gt;foo-&amp;gt;output&lt;&#x2F;code&gt; 的位置上也是未初始化的、随意一段内存，却被当成了一个合法的 &lt;code&gt;std::function&lt;&#x2F;code&gt;。在这段随意的内存上试图调用 &lt;code&gt;std::function&lt;&#x2F;code&gt; 的函数则成为了 UB，导致了 segfault&lt;&#x2F;p&gt;
&lt;p&gt;因此解决方式也很简单，在 &lt;code&gt;malloc&lt;&#x2F;code&gt; 之后手动 placement new 一下结构体（或者是单独初始化 output）即可&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;Foo* foo = (Foo*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span&gt;(sizeof(Foo));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;(foo-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;)) std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(...)&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
